openapi: 3.0.1
info:
  title: Harbor API
  description: These APIs provide services for manipulating Harbor project.
  version: 1.10.0
servers:
- url: http://localhost/api
- url: https://localhost/api
security:
- basicAuth: []
paths:
  /health:
    get:
      tags:
      - Products
      summary: Health check API
      description: |
        The endpoint returns the health stauts of the system.
      responses:
        "200":
          description: The system health status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverallHealthStatus'
            text/plain:
              schema:
                $ref: '#/components/schemas/OverallHealthStatus'
  /search:
    get:
      tags:
      - Products
      summary: Search for projects, repositories and helm charts
      description: |
        The Search endpoint returns information about the projects ,repositories  and helm charts offered at public status or related to the current logged in user. The response includes the project, repository list and charts in a proper display order.
      parameters:
      - name: q
        in: query
        description: Search parameter for project and repository name.
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: An array of search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Search'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Search'
        "500":
          description: Unexpected internal errors.
          content: {}
  /projects:
    get:
      tags:
      - Products
      summary: List projects
      description: |
        This endpoint returns all projects created by Harbor, and can be filtered by project name.
      parameters:
      - name: name
        in: query
        description: The name of project.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: public
        in: query
        description: The project is public or private.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          format: int32
      - name: owner
        in: query
        description: The name of project owner.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page number, default is 1.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: page_size
        in: query
        description: The size of per page, default is 10, maximum is 100.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Return all matched projects.
          headers:
            X-Total-Count:
              description: The total count of projects
              style: simple
              explode: false
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        "401":
          description: User need to log in first.
          content: {}
        "500":
          description: Internal errors.
          content: {}
    post:
      tags:
      - Products
      summary: Create a new project.
      description: |
        This endpoint is for user to create a new project.
      requestBody:
        description: New created project.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectReq'
        required: true
      responses:
        "201":
          description: Project created successfully.
          content: {}
        "400":
          description: Unsatisfied with constraints of the project creation.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "409":
          description: Project name already exists.
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: project
    head:
      tags:
      - Products
      summary: Check if the project name user provided already exists.
      description: |
        This endpoint is used to check if the project name user provided already exist.
      parameters:
      - name: project_name
        in: query
        description: Project name for checking exists.
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Project name exists.
          content: {}
        "404":
          description: Project name does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /projects/{project_id}:
    get:
      tags:
      - Products
      summary: Return specific project detail information
      description: |
        This endpoint returns specific project information by project ID.
      parameters:
      - name: project_id
        in: path
        description: Project ID for filtering results.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Return matched project information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
            text/plain:
              schema:
                $ref: '#/components/schemas/Project'
        "401":
          description: User need to log in first.
          content: {}
        "500":
          description: Internal errors.
          content: {}
    put:
      tags:
      - Products
      summary: Update properties for a selected project.
      description: |
        This endpoint is aimed to update the properties of a project.
      parameters:
      - name: project_id
        in: path
        description: Selected project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Updates of project.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectReq'
        required: true
      responses:
        "200":
          description: Updated project properties successfully.
          content: {}
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission to the project.
          content: {}
        "404":
          description: Project ID does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: project
    delete:
      tags:
      - Products
      summary: Delete project by projectID
      description: |
        This endpoint is aimed to delete project by project ID.
      parameters:
      - name: project_id
        in: path
        description: Project ID of project which will be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Project is deleted successfully.
          content: {}
        "400":
          description: Invalid project id.
          content: {}
        "403":
          description: User need to log in first.
          content: {}
        "404":
          description: Project does not exist.
          content: {}
        "412":
          description: Project contains policies, can not be deleted.
          content: {}
        "500":
          description: Internal errors.
          content: {}
  /projects/{project_id}/logs:
    get:
      tags:
      - Products
      summary: Get access logs accompany with a relevant project.
      description: |
        This endpoint let user search access logs filtered by operations and date time ranges.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: username
        in: query
        description: Username of the operator.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repository
        in: query
        description: The name of repository
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tag
        in: query
        description: The name of tag
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: operation
        in: query
        description: The operation
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: begin_timestamp
        in: query
        description: The begin timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: end_timestamp
        in: query
        description: The end timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page number, default is 1.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: page_size
        in: query
        description: The size of per page, default is 10, maximum is 100.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Get access log successfully.
          headers:
            X-Total-Count:
              description: The total count of access logs
              style: simple
              explode: false
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessLog'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessLog'
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /projects/{project_id}/summary:
    get:
      tags:
      - Products
      summary: Get summary of the project.
      description: Get summary of the project.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get summary of the project successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSummary'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectSummary'
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission to get summary of the project.
          content: {}
        "404":
          description: Project ID does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /projects/{project_id}/metadatas:
    get:
      tags:
      - Products
      summary: Get project metadata.
      description: |
        This endpoint returns metadata of the project specified by project ID.
      parameters:
      - name: project_id
        in: path
        description: The ID of project.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get metadata successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMetadata'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectMetadata'
        "401":
          description: User need to login first.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
    post:
      tags:
      - Products
      summary: Add metadata for the project.
      description: |
        This endpoint is aimed to add metadata of a project.
      parameters:
      - name: project_id
        in: path
        description: Selected project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: The metadata of project.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMetadata'
        required: true
      responses:
        "200":
          description: Add metadata successfully.
          content: {}
        "400":
          description: Invalid request.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission to the project.
          content: {}
        "404":
          description: Project ID does not exist.
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Internal server errors.
          content: {}
      x-codegen-request-body-name: metadata
  /projects/{project_id}/metadatas/{meta_name}:
    get:
      tags:
      - Products
      summary: Get project metadata
      description: |
        This endpoint returns specified metadata of a project.
      parameters:
      - name: project_id
        in: path
        description: Project ID for filtering results.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: meta_name
        in: path
        description: The name of metadat.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Get metadata successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMetadata'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectMetadata'
        "401":
          description: User need to log in first.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
    put:
      tags:
      - Products
      summary: Update metadata of a project.
      description: |
        This endpoint is aimed to update the metadata of a project.
      parameters:
      - name: project_id
        in: path
        description: The ID of project.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: meta_name
        in: path
        description: The name of metadat.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Updated metadata successfully.
          content: {}
        "400":
          description: Invalid request.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission to the project.
          content: {}
        "404":
          description: Project or metadata does not exist.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
    delete:
      tags:
      - Products
      summary: Delete metadata of a project
      description: |
        This endpoint is aimed to delete metadata of a project.
      parameters:
      - name: project_id
        in: path
        description: The ID of project.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: meta_name
        in: path
        description: The name of metadat.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Metadata is deleted successfully.
          content: {}
        "400":
          description: Invalid requst.
          content: {}
        "403":
          description: User need to log in first.
          content: {}
        "404":
          description: Project or metadata does not exist.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
  /projects/{project_id}/members:
    get:
      tags:
      - Products
      summary: Get all project member information
      description: Get all project member information
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: entityname
        in: query
        description: The entity name to search.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Get project members successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMemberEntity'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMemberEntity'
        "400":
          description: The project id is invalid.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the project.
          content: {}
        "404":
          description: Project ID does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    post:
      tags:
      - Products
      summary: Create project member
      description: 'Create project member relationship, the member can be one of the
        user_member and group_member,  The user_member need to specify user_id or
        username. If the user already exist in harbor DB, specify the user_id,  If
        does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member
        need to specify id or ldap_group_dn. If the group already exist in harbor
        DB. specify the user group''s id,  If does not exist, it will SearchAndOnBoard
        the group. '
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMember'
        required: false
      responses:
        "201":
          description: Project member created successfully.
          content: {}
        "400":
          description: Illegal format of project member or project id is invalid,
            or LDAP DN is invalid.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the project.
          content: {}
        "409":
          description: A user group with same group name already exist or an LDAP
            user group with same DN already exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: project_member
  /projects/{project_id}/members/{mid}:
    get:
      tags:
      - Products
      summary: Get the project member information
      description: Get the project member information
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: mid
        in: path
        description: The member ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Project member retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberEntity'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectMemberEntity'
        "400":
          description: Illegal format of project member or invalid project id, member
            id.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the project.
          content: {}
        "404":
          description: Project or projet member does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      summary: Update project member
      description: Update project member relationship
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: mid
        in: path
        description: Member ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
        required: false
      responses:
        "200":
          description: Project member updated successfully.
          content: {}
        "400":
          description: Invalid role id, it should be 1,2 or 3, or invalid project
            id, or invalid member id.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the project.
          content: {}
        "404":
          description: project or project member does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: role
    delete:
      tags:
      - Products
      summary: Delete project member
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: mid
        in: path
        description: Member ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Project member deleted successfully.
          content: {}
        "400":
          description: The project id or project member id is invalid.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the project.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /statistics:
    get:
      tags:
      - Products
      summary: Get projects number and repositories number relevant to the user
      description: |
        This endpoint is aimed to statistic all of the projects number and repositories number relevant to the logined user, also the public projects number and repositories number. If the user is admin, he can also get total projects number and total repositories number.
      responses:
        "200":
          description: Get the projects number and repositories number relevant to
            the user successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticMap'
            text/plain:
              schema:
                $ref: '#/components/schemas/StatisticMap'
        "401":
          description: User need to log in first.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /users:
    get:
      tags:
      - Products
      summary: Get registered users of Harbor.
      description: |
        This endpoint is for user to search registered users, support for filtering results with username.Notice, by now this operation is only for administrator.
      parameters:
      - name: username
        in: query
        description: Username for filtering results.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: email
        in: query
        description: Email for filtering results.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page number, default is 1.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: page_size
        in: query
        description: The size of per page.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Searched for users of Harbor successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "400":
          description: Invalid user ID.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    post:
      tags:
      - Products
      summary: Creates a new user account.
      description: |
        This endpoint is to create a user if the user does not already exist.
      requestBody:
        description: New created user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User created successfully.
          content: {}
        "400":
          description: Unsatisfied with constraints of the user creation.
          content: {}
        "403":
          description: User registration can only be used by admin role user when
            self-registration is off.
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: user
  /users/current:
    get:
      tags:
      - Products
      summary: Get current user info.
      description: |
        This endpoint is to get the current user information.
      responses:
        "200":
          description: Get current user information successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: User need to log in first.
          content: {}
  /users/current/permissions:
    get:
      tags:
      - Products
      summary: Get current user permissions.
      description: |
        This endpoint is to get the current user permissions.
      parameters:
      - name: scope
        in: query
        description: Get permissions of the scope
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: relative
        in: query
        description: |
          If true, the resources in the response are relative to the scope,
          eg for resource '/project/1/repository' if relative is 'true' then the resource in response will be 'repository'.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Get current user permission successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        "401":
          description: User need to log in first.
          content: {}
        "500":
          description: Internal errors.
          content: {}
  /users/search:
    get:
      tags:
      - Products
      summary: Search users by username
      description: |
        This endpoint is to search the users by username.
      parameters:
      - name: username
        in: query
        description: Username for filtering results.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page number, default is 1.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: page_size
        in: query
        description: The size of per page.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Search users by username, email successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearch'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearch'
        "500":
          description: Unexpected internal errors.
          content: {}
  /users/{user_id}:
    get:
      tags:
      - Products
      summary: Get a user's profile.
      description: |
        Get user's profile with user id.
      parameters:
      - name: user_id
        in: path
        description: Registered user ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int
      responses:
        "200":
          description: Get user's profile successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid user ID.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "404":
          description: User ID does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      summary: Update a registered user to change his profile.
      description: |
        This endpoint let a registered user change his profile.
      parameters:
      - name: user_id
        in: path
        description: Registered user ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int
      requestBody:
        description: Only email, realname and comment can be modified.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        "200":
          description: Updated user's profile successfully.
          content: {}
        "400":
          description: Invalid user ID.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "404":
          description: User ID does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: profile
    delete:
      tags:
      - Products
      summary: Mark a registered user as be removed.
      description: |
        This endpoint let administrator of Harbor mark a registered user as
        be removed.It actually won't be deleted from DB.
      parameters:
      - name: user_id
        in: path
        description: User ID for marking as to be removed.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int
      responses:
        "200":
          description: Marked user as be removed successfully.
          content: {}
        "400":
          description: Invalid user ID.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "404":
          description: User ID does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /users/{user_id}/password:
    put:
      tags:
      - Products
      summary: Change the password on a user that already exists.
      description: |
        This endpoint is for user to update password. Users with the admin role can change any user's password. Guest users can change only their own password.
      parameters:
      - name: user_id
        in: path
        description: Registered user ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int
      requestBody:
        description: Password to be updated, the attribute 'old_password' is optional
          when the API is called by the system administrator.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
        required: true
      responses:
        "200":
          description: Updated password successfully.
          content: {}
        "400":
          description: Invalid user ID; Old password is blank; New password is blank.
          content: {}
        "401":
          description: Don't have authority to change password. Please check login
            status.
          content: {}
        "403":
          description: The caller does not have permission to update the password
            of the user with given ID, or the old password in request body is not
            correct.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: password
  /users/{user_id}/sysadmin:
    put:
      tags:
      - Products
      summary: Update a registered user to change to be an administrator of Harbor.
      description: |
        This endpoint let a registered user change to be an administrator
        of Harbor.
      parameters:
      - name: user_id
        in: path
        description: Registered user ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int
      requestBody:
        description: Toggle a user to admin or not.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HasAdminRole'
        required: true
      responses:
        "200":
          description: Updated user's admin role successfully.
          content: {}
        "400":
          description: Invalid user ID.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "404":
          description: User ID does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: has_admin_role
  /users/{user_id}/cli_secret:
    put:
      tags:
      - Products
      summary: Set CLI secret for a user.
      description: |
        This endpoint let user generate a new CLI secret for himself.  This API only works when auth mode is set to 'OIDC'.
        Once this API returns with successful status, the old secret will be invalid, as there will be only one CLI secret
        for a user.
      parameters:
      - name: user_id
        in: path
        description: User ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int
      requestBody:
        description: JSON object that includes the new secret
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
        required: true
      responses:
        "200":
          description: The secret is successfully updated
          content: {}
        "400":
          description: Invalid user ID.  Or user is not onboarded via OIDC authentication.
            Or the secret does not meet the standard.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: Non-admin user can only generate the cli secret of himself.
          content: {}
        "404":
          description: User ID does not exist.
          content: {}
        "412":
          description: The auth mode of the system is not "oidc_auth", or the user
            is not onboarded via OIDC AuthN.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: input_secret
  /repositories:
    get:
      tags:
      - Products
      summary: Get repositories accompany with relevant project and repo name.
      description: |
        This endpoint lets user search repositories accompanying with relevant project ID and repo name. Repositories can be sorted by repo name, creation_time, update_time in either ascending or descending order.
      parameters:
      - name: project_id
        in: query
        description: Relevant project ID.
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: q
        in: query
        description: Repo name for filtering results.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        description: |
          Sort method, valid values include: 'name', '-name', 'creation_time', '-creation_time', 'update_time', '-update_time'. Here '-' stands for descending order.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: label_id
        in: query
        description: The ID of label used to filter the result.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number, default is 1.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: page_size
        in: query
        description: The size of per page, default is 10, maximum is 100.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Get repositories successfully.
          headers:
            X-Total-Count:
              description: The total count of repositories
              style: simple
              explode: false
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'
        "400":
          description: Invalid project ID.
          content: {}
        "403":
          description: Project is not public or current user is irrelevant to the
            repository.
          content: {}
        "404":
          description: Project ID does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /repositories/{repo_name}:
    put:
      tags:
      - Products
      summary: Update description of the repository.
      description: |
        This endpoint is used to update description of the repository.
      parameters:
      - name: repo_name
        in: path
        description: The name of repository which will be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The description of the repository.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryDescription'
        required: true
      responses:
        "200":
          description: Update successfully.
          content: {}
        "401":
          description: Unauthorized.
          content: {}
        "403":
          description: Forbidden.
          content: {}
        "404":
          description: Repository not found.
          content: {}
      x-codegen-request-body-name: description
    delete:
      tags:
      - Products
      summary: Delete a repository.
      description: |
        This endpoint let user delete a repository with name.
      parameters:
      - name: repo_name
        in: path
        description: The name of repository which will be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Delete successfully.
          content: {}
        "400":
          description: Invalid repo_name.
          content: {}
        "401":
          description: Unauthorized.
          content: {}
        "403":
          description: Forbidden.
          content: {}
        "404":
          description: Repository not found.
          content: {}
        "412":
          description: Precondition Failed.
          content: {}
  /repositories/{repo_name}/labels:
    get:
      tags:
      - Products
      summary: Get labels of a repository.
      description: |
        Get labels of a repository specified by the repo_name.
      parameters:
      - name: repo_name
        in: path
        description: The name of repository.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
        "401":
          description: Unauthorized.
          content: {}
        "403":
          description: Forbidden. User should have read permisson for the repository
            to perform the action.
          content: {}
        "404":
          description: Repository not found.
          content: {}
    post:
      tags:
      - Products
      summary: Add a label to the repository.
      description: |
        Add a label to the repository.
      parameters:
      - name: repo_name
        in: path
        description: The name of repository.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Only the ID property is required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        required: true
      responses:
        "200":
          description: Successfully.
          content: {}
        "401":
          description: Unauthorized.
          content: {}
        "403":
          description: Forbidden. User should have write permisson for the repository
            to perform the action.
          content: {}
        "404":
          description: Resource not found.
          content: {}
      x-codegen-request-body-name: label
  /repositories/{repo_name}/labels/{label_id}:
    delete:
      tags:
      - Products
      summary: Delete label from the repository.
      description: |
        Delete the label from the repository specified by the repo_name.
      parameters:
      - name: repo_name
        in: path
        description: The name of repository.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: label_id
        in: path
        description: The ID of label.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successfully.
          content: {}
        "401":
          description: Unauthorized.
          content: {}
        "403":
          description: Forbidden. User should have write permisson for the repository
            to perform the action.
          content: {}
        "404":
          description: Resource not found.
          content: {}
  /repositories/{repo_name}/tags/{tag}:
    get:
      tags:
      - Products
      summary: Get the tag of the repository.
      description: |
        This endpoint aims to retrieve the tag of the repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned.
      parameters:
      - name: repo_name
        in: path
        description: Relevant repository name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tag
        in: path
        description: Tag of the repository.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Get tag successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTag'
            text/plain:
              schema:
                $ref: '#/components/schemas/DetailedTag'
        "500":
          description: Unexpected internal errors.
          content: {}
    delete:
      tags:
      - Products
      summary: Delete a tag in a repository.
      description: |
        This endpoint let user delete tags with repo name and tag.
      parameters:
      - name: repo_name
        in: path
        description: The name of repository which will be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tag
        in: path
        description: Tag of a repository.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Delete tag successfully.
          content: {}
        "400":
          description: Invalid repo_name.
          content: {}
        "401":
          description: Unauthorized.
          content: {}
        "403":
          description: Forbidden.
          content: {}
        "404":
          description: Repository or tag not found.
          content: {}
  /repositories/{repo_name}/tags:
    get:
      tags:
      - Products
      summary: Get tags of a relevant repository.
      description: |
        This endpoint aims to retrieve tags from a relevant repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned.
      parameters:
      - name: repo_name
        in: path
        description: Relevant repository name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: label_id
        in: query
        description: A label ID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: detail
        in: query
        description: Bool value indicating whether return detailed information of
          the tag, such as vulnerability scan info, if set to false, only tag name
          is returned.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Get tags successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailedTag'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailedTag'
        "500":
          description: Unexpected internal errors.
          content: {}
    post:
      tags:
      - Products
      summary: Retag an image
      description: |
        This endpoint tags an existing image with another tag in this repo, source images can be in different repos or projects.
      parameters:
      - name: repo_name
        in: path
        description: Relevant repository name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request to give source image and target tag.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetagReq'
        required: true
      responses:
        "200":
          description: Image retag successfully.
          content: {}
        "400":
          description: Invalid image values provided.
          content: {}
        "401":
          description: User has no permission to the source project or destination
            project.
          content: {}
        "403":
          description: Forbiden as quota exceeded.
          content: {}
        "404":
          description: Project or repository not found.
          content: {}
        "409":
          description: Target tag already exists.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: request
  /repositories/{repo_name}/tags/{tag}/labels:
    get:
      tags:
      - Products
      summary: Get labels of an image.
      description: |
        Get labels of an image specified by the repo_name and tag.
      parameters:
      - name: repo_name
        in: path
        description: The name of repository.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tag
        in: path
        description: The tag of the image.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
        "401":
          description: Unauthorized.
          content: {}
        "403":
          description: Forbidden. User should have read permisson for the image to
            perform the action.
          content: {}
        "404":
          description: Resource not found.
          content: {}
    post:
      tags:
      - Products
      summary: Add a label to image.
      description: |
        Add a label to the image.
      parameters:
      - name: repo_name
        in: path
        description: The name of repository.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tag
        in: path
        description: The tag of the image.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Only the ID property is required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        required: true
      responses:
        "200":
          description: Successfully.
          content: {}
        "401":
          description: Unauthorized.
          content: {}
        "403":
          description: Forbidden. User should have write permisson for the image to
            perform the action.
          content: {}
        "404":
          description: Resource not found.
          content: {}
      x-codegen-request-body-name: label
  /repositories/{repo_name}/tags/{tag}/labels/{label_id}:
    delete:
      tags:
      - Products
      summary: Delete label from the image.
      description: |
        Delete the label from the image specified by the repo_name and tag.
      parameters:
      - name: repo_name
        in: path
        description: The name of repository.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tag
        in: path
        description: The tag of the image.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: label_id
        in: path
        description: The ID of label.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successfully.
          content: {}
        "401":
          description: Unauthorized.
          content: {}
        "403":
          description: Forbidden. User should have write permisson for the image to
            perform the action.
          content: {}
        "404":
          description: Resource not found.
          content: {}
  /repositories/{repo_name}/tags/{tag}/manifest:
    get:
      tags:
      - Products
      summary: Get manifests of a relevant repository.
      description: |
        This endpoint aims to retreive manifests from a relevant repository.
      parameters:
      - name: repo_name
        in: path
        description: Repository name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tag
        in: path
        description: Tag name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: query
        description: The version of manifest, valid value are "v1" and "v2", default
          is "v2"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Retrieved manifests from a relevant repository successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
            text/plain:
              schema:
                $ref: '#/components/schemas/Manifest'
        "404":
          description: Retrieved manifests from a relevant repository not found.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /repositories/{repo_name}/signatures:
    get:
      tags:
      - Products
      summary: Get signature information of a repository
      description: |
        This endpoint aims to retrieve signature information of a repository, the data is
        from the nested notary instance of Harbor.
        If the repository does not have any signature information in notary, this API will
        return an empty list with response code 200, instead of 404
      parameters:
      - name: repo_name
        in: path
        description: repository name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Retrieved signatures.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepoSignature'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepoSignature'
        "500":
          description: Server side error.
          content: {}
  /repositories/top:
    get:
      tags:
      - Products
      summary: Get public repositories which are accessed most.
      description: |
        This endpoint aims to let users see the most popular public repositories
      parameters:
      - name: count
        in: query
        description: The number of the requested public repositories, default is 10
          if not provided.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Get popular repositories successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'
        "400":
          description: Bad request because of invalid count.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /logs:
    get:
      tags:
      - Products
      summary: Get recent logs of the projects which the user is a member of
      description: |
        This endpoint let user see the recent operation logs of the projects which he is member of
      parameters:
      - name: username
        in: query
        description: Username of the operator.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repository
        in: query
        description: The name of repository
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tag
        in: query
        description: The name of tag
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: operation
        in: query
        description: The operation
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: begin_timestamp
        in: query
        description: The begin timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: end_timestamp
        in: query
        description: The end timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page number, default is 1.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: page_size
        in: query
        description: The size of per page, default is 10, maximum is 100.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Get the required logs successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessLog'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessLog'
        "400":
          description: Bad request because of invalid parameters.
          content: {}
        "401":
          description: User need to login first.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /replication/executions:
    get:
      tags:
      - Products
      summary: List replication executions.
      description: |
        This endpoint let user list replication executions.
      parameters:
      - name: policy_id
        in: query
        description: The policy ID.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: status
        in: query
        description: The execution status.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: trigger
        in: query
        description: The trigger mode.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: page_size
        in: query
        description: The page size.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationExecution'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationExecution'
        "401":
          description: User need to login first.
          content: {}
        "403":
          description: User has no privilege for the operation.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    post:
      tags:
      - Products
      summary: Start one execution of the replication.
      description: |
        This endpoint is for user to start one execution of the replication.
      requestBody:
        description: The execution that needs to be started, only the property "policy_id"
          is needed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicationExecution'
        required: true
      responses:
        "201":
          description: Success.
          content: {}
        "400":
          description: Bad request.
          content: {}
        "401":
          description: User need to login first.
          content: {}
        "403":
          description: User has no privilege for the operation.
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: execution
  /replication/executions/{id}:
    get:
      tags:
      - Products
      summary: Get the execution of the replication.
      description: |
        This endpoint is for user to get one execution of the replication.
      parameters:
      - name: id
        in: path
        description: The execution ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationExecution'
            text/plain:
              schema:
                $ref: '#/components/schemas/ReplicationExecution'
        "400":
          description: Bad request.
          content: {}
        "401":
          description: User need to login first.
          content: {}
        "403":
          description: User has no privilege for the operation.
          content: {}
        "404":
          description: Resource requested does not exist.
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      summary: Stop the execution of the replication.
      description: |
        This endpoint is for user to stop one execution of the replication.
      parameters:
      - name: id
        in: path
        description: The execution ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success.
          content: {}
        "400":
          description: Bad request.
          content: {}
        "401":
          description: User need to login first.
          content: {}
        "403":
          description: User has no privilege for the operation.
          content: {}
        "404":
          description: Resource requested does not exist.
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /replication/executions/{id}/tasks:
    get:
      tags:
      - Products
      summary: Get the task list of one execution.
      description: |
        This endpoint is for user to get the task list of one execution.
      parameters:
      - name: id
        in: path
        description: The execution ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationTask'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationTask'
        "400":
          description: Bad request.
          content: {}
        "401":
          description: User need to login first.
          content: {}
        "403":
          description: User has no privilege for the operation.
          content: {}
        "404":
          description: Resource requested does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /replication/executions/{id}/tasks/{task_id}/log:
    get:
      tags:
      - Products
      summary: Get the log of one task.
      description: |
        This endpoint is for user to get the log of one task.
      parameters:
      - name: id
        in: path
        description: The execution ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: task_id
        in: path
        description: The task ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success.
          content: {}
        "400":
          description: Bad request.
          content: {}
        "401":
          description: User need to login first.
          content: {}
        "403":
          description: User has no privilege for the operation.
          content: {}
        "404":
          description: Resource requested does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /replication/policies:
    get:
      tags:
      - Products
      summary: List replication policies
      description: |
        This endpoint let user list replication policies
      parameters:
      - name: name
        in: query
        description: The replication policy name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page nubmer.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: page_size
        in: query
        description: The size of per page.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Get policy successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationPolicy'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationPolicy'
        "400":
          description: Bad Request
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: Internal Server Error
          content: {}
    post:
      tags:
      - Products
      summary: Create a replication policy
      description: |
        This endpoint let user create a replication policy
      requestBody:
        description: The policy model.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicationPolicy'
        required: true
      responses:
        "201":
          description: Created
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "409":
          description: Conflict
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: policy
  /replication/policies/{id}:
    get:
      tags:
      - Products
      summary: Get replication policy.
      description: |
        This endpoint let user get replication policy by specific ID.
      parameters:
      - name: id
        in: path
        description: policy ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get the replication policy successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationPolicy'
            text/plain:
              schema:
                $ref: '#/components/schemas/ReplicationPolicy'
        "400":
          description: Bad Request
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
        "500":
          description: Internal Server Error
          content: {}
    put:
      tags:
      - Products
      summary: Update the replication policy
      description: |
        This endpoint let user update policy.
      parameters:
      - name: id
        in: path
        description: policy ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: The replication policy model.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicationPolicy'
        required: true
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
        "409":
          description: Conflict
          content: {}
        "500":
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: policy
    delete:
      tags:
      - Products
      summary: Delete the replication policy specified by ID.
      description: |
        Delete the replication policy specified by ID.
      parameters:
      - name: id
        in: path
        description: Replication policy ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
        "412":
          description: Precondition Failed
          content: {}
        "500":
          description: Internal Server Error
          content: {}
  /labels:
    get:
      tags:
      - Products
      summary: List labels according to the query strings.
      description: |
        This endpoint let user list labels by name, scope and project_id
      parameters:
      - name: name
        in: query
        description: The label name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: scope
        in: query
        description: The label scope. Valid values are g and p. g for global labels
          and p for project labels.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: project_id
        in: query
        description: Relevant project ID, required when scope is p.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: The page nubmer.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: page_size
        in: query
        description: The size of per page.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Get successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
        "400":
          description: Invalid parameters.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    post:
      tags:
      - Products
      summary: Post creates a label
      description: |
        This endpoint let user creates a label.
      requestBody:
        description: The json object of label.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        required: true
      responses:
        "201":
          description: Create successfully.
          content: {}
        "400":
          description: Invalid parameters.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "409":
          description: Label with the same name and same scope already exists.
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: label
  /labels/{id}:
    get:
      tags:
      - Products
      summary: Get the label specified by ID.
      description: |
        This endpoint let user get the label by specific ID.
      parameters:
      - name: id
        in: path
        description: Label ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
            text/plain:
              schema:
                $ref: '#/components/schemas/Label'
        "401":
          description: User need to log in first.
          content: {}
        "404":
          description: The resource does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      summary: Update the label properties.
      description: |
        This endpoint let user update label properties.
      parameters:
      - name: id
        in: path
        description: Label ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: The updated label json object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        required: true
      responses:
        "200":
          description: Update successfully.
          content: {}
        "400":
          description: Invalid parameters.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "404":
          description: The resource does not exist.
          content: {}
        "409":
          description: The label with the same name already exists.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: label
    delete:
      tags:
      - Products
      summary: Delete the label specified by ID.
      description: |
        Delete the label specified by ID.
      parameters:
      - name: id
        in: path
        description: Label ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Delete successfully.
          content: {}
        "400":
          description: Invalid parameters.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "404":
          description: The resource does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /labels/{id}/resources:
    get:
      tags:
      - Products
      summary: Get the resources that the label is referenced by.
      description: |
        This endpoint let user get the resources that the label is referenced by. Only the replication policies are returned for now.
      parameters:
      - name: id
        in: path
        description: Label ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
            text/plain:
              schema:
                $ref: '#/components/schemas/Resource'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: Forbidden.
          content: {}
        "404":
          description: The resource does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /replication/adapters:
    get:
      tags:
      - Products
      summary: List supported adapters.
      description: |
        This endpoint let user list supported adapters.
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: Unauthorized.
          content: {}
        "403":
          description: Forbidden.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /registries:
    get:
      tags:
      - Products
      summary: List registries.
      description: |
        This endpoint let user list filtered registries by name, if name is nil, list returns all registries.
      parameters:
      - name: name
        in: query
        description: Registry's name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: List registries successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Registry'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Registry'
        "401":
          description: User need to log in first.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    post:
      tags:
      - Products
      summary: Create a new registry.
      description: |
        This endpoint is for user to create a new registry.
      requestBody:
        description: New created registry.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registry'
        required: true
      responses:
        "201":
          description: Registry created successfully.
          content: {}
        "400":
          description: Unsatisfied with constraints of the registry creation.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "409":
          description: Registry name already exists.
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: registry
  /registries/ping:
    post:
      tags:
      - Products
      summary: Ping status of a registry.
      description: |
        This endpoint checks status of a registry, the registry can be given by ID or URL (together with credential)
      requestBody:
        description: Registry to ping.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registry'
        required: true
      responses:
        "200":
          description: Registry is healthy.
          content: {}
        "400":
          description: No proper registry information provided.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "404":
          description: Registry not found (when registry is provided by ID).
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: registry
  /registries/{id}:
    get:
      tags:
      - Products
      summary: Get registry.
      description: This endpoint is for get specific registry.
      parameters:
      - name: id
        in: path
        description: The registry ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get registry successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
            text/plain:
              schema:
                $ref: '#/components/schemas/Registry'
        "401":
          description: User need to log in first.
          content: {}
        "404":
          description: Registry not found
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      summary: Update a given registry.
      description: |
        This endpoint is for update a given registry.
      parameters:
      - name: id
        in: path
        description: The registry's ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Updates registry.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRegistry'
        required: true
      responses:
        "200":
          description: Updated registry successfully.
          content: {}
        "400":
          description: The registry is associated with policy which is enabled.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "404":
          description: Registry does not exist.
          content: {}
        "409":
          description: Registry name is already used.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: repo_target
    delete:
      tags:
      - Products
      summary: Delete specific registry.
      description: |
        This endpoint is for to delete specific registry.
      parameters:
      - name: id
        in: path
        description: The registry's ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Registry deleted successfully.
          content: {}
        "400":
          description: Registry's ID is invalid or the registry is used by policies.
          content: {}
        "401":
          description: Only admin has this authority.
          content: {}
        "404":
          description: Registry does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /registries/{id}/info:
    get:
      tags:
      - Products
      summary: Get registry info.
      description: Get the info of one specific registry.
      parameters:
      - name: id
        in: path
        description: The registry ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get registry successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/RegistryInfo'
        "401":
          description: User need to log in first.
          content: {}
        "404":
          description: Registry not found
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /registries/{id}/namespace:
    get:
      tags:
      - Products
      summary: List namespaces of registry
      description: |
        This endpoint let user list namespaces of registry according to query.
      parameters:
      - name: id
        in: path
        description: The registry ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: name
        in: query
        description: The name of namespace.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Namespace'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Namespace'
        "401":
          description: User need to login first.
          content: {}
        "403":
          description: User has no privilege for the operation.
          content: {}
        "404":
          description: No registry found.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /internal/syncregistry:
    post:
      tags:
      - Products
      summary: Sync repositories from registry to DB.
      description: |
        This endpoint is for syncing all repositories of registry with database.
      responses:
        "200":
          description: Sync repositories successfully.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /internal/syncquota:
    post:
      tags:
      - Products
      summary: Sync quota from registry/chart to DB.
      description: |
        This endpoint is for syncing quota usage of registry/chart with database.
      responses:
        "200":
          description: Sync repositories successfully.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of system admin role.
          content: {}
  /internal/switchquota:
    put:
      tags:
      - Products
      summary: Enable or disable quota.
      description: |
        This endpoint is for enable/disable quota. When quota is disabled, no resource require/release in image/chart push and delete.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotaSwitcher'
        required: true
      responses:
        "200":
          description: Enable/Disable quota successfully.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of system admin role.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: switcher
  /systeminfo:
    get:
      tags:
      - Products
      summary: Get general system info
      description: |
        This API is for retrieving general system info, this can be called by anonymous request.
      responses:
        "200":
          description: Get general info successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/GeneralInfo'
        "500":
          description: Unexpected internal error.
          content: {}
  /systeminfo/volumes:
    get:
      tags:
      - Products
      summary: Get system volume info (total/free size).
      description: |
        This endpoint is for retrieving system volume info that only provides for admin user.
      responses:
        "200":
          description: Get system volumes successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/SystemInfo'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /systeminfo/getcert:
    get:
      tags:
      - Products
      summary: Get default root certificate.
      description: |
        This endpoint is for downloading a default root certificate.
      responses:
        "200":
          description: Get default root certificate successfully.
          content: {}
        "404":
          description: Not found the default root certificate.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /ldap/ping:
    post:
      tags:
      - Products
      summary: Ping available ldap service.
      description: |
        This endpoint ping the available ldap service for test related configuration parameters.
      requestBody:
        description: ldap configuration. support input ldap service configuration.
          If it's a empty request, will load current configuration from the system.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapConf'
        required: false
      responses:
        "200":
          description: Ping ldap service successfully.
          content: {}
        "400":
          description: Inviald ldap configuration parameters.
          content: {}
        "401":
          description: User need to login first.
          content: {}
        "403":
          description: Only admin has this authority.
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: ldapconf
  /ldap/groups/search:
    get:
      tags:
      - Products
      summary: Search available ldap groups.
      description: |
        This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn.
      parameters:
      - name: groupname
        in: query
        description: Ldap group name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: groupdn
        in: query
        description: The LDAP group DN
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Search ldap group successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroup'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroup'
        "400":
          description: The Ldap group DN is invalid.
          content: {}
        "404":
          description: No ldap group found.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /ldap/users/search:
    get:
      tags:
      - Products
      summary: Search available ldap users.
      description: |
        This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter.
      parameters:
      - name: username
        in: query
        description: Registered user ID
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Search ldap users successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LdapUsers'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LdapUsers'
        "401":
          description: User need to login first.
          content: {}
        "403":
          description: Only admin has this authority.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /ldap/users/import:
    post:
      tags:
      - Products
      summary: Import selected available ldap users.
      description: |
        This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information.
        If have errors when import user, will return the list of importing failed uid and the failed reason.
      requestBody:
        description: The uid listed for importing. This list will check users validity
          of ldap service based on configuration from the system.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapImportUsers'
        required: true
      responses:
        "200":
          description: Add ldap users successfully.
          content: {}
        "401":
          description: User need to login first.
          content: {}
        "403":
          description: Only admin has this authority.
          content: {}
        "404":
          description: Failed import some users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LdapFailedImportUsers'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LdapFailedImportUsers'
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
      x-codegen-request-body-name: uid_list
  /usergroups:
    get:
      tags:
      - Products
      summary: Get all user groups information
      description: Get all user groups information
      responses:
        "200":
          description: Get user group successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroup'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroup'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the user group.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    post:
      tags:
      - Products
      summary: Create user group
      description: Create user group information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
        required: false
      responses:
        "201":
          description: User group created successfully.
          content: {}
        "400":
          description: Invalid LDAP group DN.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the user group.
          content: {}
        "409":
          description: A user group with same group name already exist, or an LDAP
            user group with same DN already exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: usergroup
  /usergroups/{group_id}:
    get:
      tags:
      - Products
      summary: Get user group information
      description: Get user group information
      parameters:
      - name: group_id
        in: path
        description: Group ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: User group get successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserGroup'
        "400":
          description: The user group id is invalid.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the user group.
          content: {}
        "404":
          description: User group does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      summary: Update group information
      description: Update user group information
      parameters:
      - name: group_id
        in: path
        description: Group ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
        required: false
      responses:
        "200":
          description: User group updated successfully.
          content: {}
        "400":
          description: The user group id is invalid.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: Only admin has this authority.
          content: {}
        "404":
          description: User group does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: usergroup
    delete:
      tags:
      - Products
      summary: Delete user group
      description: Delete user group
      parameters:
      - name: group_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: User group deleted successfully.
          content: {}
        "400":
          description: The user group id is invalid.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: Only admin has this authority.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /system/gc:
    get:
      tags:
      - Products
      summary: Get gc results.
      description: This endpoint let user get latest ten gc results.
      responses:
        "200":
          description: Get gc results successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GCResult'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GCResult'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /system/gc/{id}:
    get:
      tags:
      - Products
      summary: Get gc status.
      description: This endpoint let user get gc status filtered by specific ID.
      parameters:
      - name: id
        in: path
        description: Relevant job ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get gc results successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GCResult'
            text/plain:
              schema:
                $ref: '#/components/schemas/GCResult'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /system/gc/{id}/log:
    get:
      tags:
      - Products
      summary: Get gc job log.
      description: This endpoint let user get gc job logs filtered by specific ID.
      parameters:
      - name: id
        in: path
        description: Relevant job ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get successfully.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "404":
          description: The specific gc ID's log does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /system/gc/schedule:
    get:
      tags:
      - Products
      summary: Get gc's schedule.
      description: This endpoint is for get schedule of gc job.
      responses:
        "200":
          description: Get gc's schedule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminJobSchedule'
            text/plain:
              schema:
                $ref: '#/components/schemas/AdminJobSchedule'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: Only admin has this authority.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      summary: Update gc's schedule.
      description: |
        This endpoint is for update gc schedule.
      requestBody:
        description: Updates of gc's schedule.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminJobSchedule'
        required: true
      responses:
        "200":
          description: Updated gc's schedule successfully.
          content: {}
        "400":
          description: Invalid schedule type.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: schedule
    post:
      tags:
      - Products
      summary: Create a gc schedule.
      description: |
        This endpoint is for update gc schedule.
      requestBody:
        description: Updates of gc's schedule.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminJobSchedule'
        required: true
      responses:
        "200":
          description: GC schedule successfully.
          content: {}
        "400":
          description: Invalid schedule type.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "409":
          description: There is a "gc" job in progress, so the request cannot be served.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: schedule
  /system/scanAll/schedule:
    get:
      tags:
      - Products
      summary: Get scan_all's schedule.
      description: This endpoint is for getting a schedule for the scan all job, which
        scans all of images in Harbor.
      responses:
        "200":
          description: Get a schedule for the scan all job, which scans all of images
            in Harbor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminJobSchedule'
            text/plain:
              schema:
                $ref: '#/components/schemas/AdminJobSchedule'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: Only admin has this authority.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      summary: Update scan all's schedule.
      description: |
        This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor.
      requestBody:
        description: Updates the schedule of scan all job, which scans all of images
          in Harbor.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminJobSchedule'
        required: true
      responses:
        "200":
          description: Updated scan_all's schedule successfully.
          content: {}
        "400":
          description: Invalid schedule type.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: schedule
    post:
      tags:
      - Products
      summary: Create a schedule or a manual trigger for the scan all job.
      description: |
        This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor.
      requestBody:
        description: Create a schedule or a manual trigger for the scan all job.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminJobSchedule'
        required: true
      responses:
        "200":
          description: Updated scan_all's schedule successfully.
          content: {}
        "400":
          description: Invalid schedule type.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "409":
          description: There is a "scanall" job in progress, so the request cannot
            be served.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
        "503":
          description: Harbor is not deployed with Clair.
          content: {}
      x-codegen-request-body-name: schedule
  /configurations:
    get:
      tags:
      - Products
      summary: Get system configurations.
      description: |
        This endpoint is for retrieving system configurations that only provides for admin user.
      responses:
        "200":
          description: Get system configurations successfully. The response body is
            a map.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationsResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ConfigurationsResponse'
        "401":
          description: User need to log in first.ß
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      summary: Modify system configurations.
      description: |
        This endpoint is for modifying system configurations that only provides for admin user.
      requestBody:
        description: The configuration map can contain a subset of the attributes
          of the schema, which are to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configurations'
        required: true
      responses:
        "200":
          description: Modify system configurations successfully.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission of admin role.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: configurations
  /email/ping:
    post:
      tags:
      - Products
      summary: Test connection and authentication with email server.
      description: |
        Test connection and authentication with email server.
      requestBody:
        description: Email server settings, if some of the settings are not assigned,
          they will be read from system configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailServerSetting'
        required: false
      responses:
        "200":
          description: Ping email server successfully.
          content: {}
        "400":
          description: Inviald email server settings.
          content: {}
        "401":
          description: User need to login first.
          content: {}
        "403":
          description: Only admin has this authority.
          content: {}
        "415":
          description: The Media Type of the request is not supported, it has to be
            "application/json"
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: settings
  /chartrepo/health:
    get:
      tags:
      - Products
      - Chart Repository
      summary: Check the health of chart repository service.
      description: Check the health of chart repository service.
      responses:
        "200":
          description: Health status of chart repository service is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
            text/plain:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
  /chartrepo/{repo}/charts:
    get:
      tags:
      - Products
      - Chart Repository
      summary: Get all the charts under the specified project
      description: Get all the charts under the specified project
      parameters:
      - name: repo
        in: path
        description: The project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Searched for charts of project in Harbor successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChartInfoEntry'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChartInfoEntry'
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
        "500":
          $ref: '#/definitions/InternalChartAPIError'
    post:
      tags:
      - Products
      - Chart Repository
      summary: Upload a chart file to the specified project.
      description: Upload a chart file to the specified project. With this API, the
        corresponding provance file can be uploaded together with chart file at once.
      parameters:
      - name: repo
        in: path
        description: The project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_1'
        required: true
      responses:
        "201":
          description: The specified chart is successfully uploaded.
          content: {}
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
        "500":
          $ref: '#/definitions/InternalChartAPIError'
        "507":
          $ref: '#/definitions/InsufficientStorageChartAPIError'
  /chartrepo/{repo}/charts/{name}:
    get:
      tags:
      - Products
      - Chart Repository
      summary: Get all the versions of the specified chart
      description: Get all the versions of the specified chart
      parameters:
      - name: repo
        in: path
        description: The project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The chart name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Retrieved all versions of the specified chart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartVersions'
            text/plain:
              schema:
                $ref: '#/components/schemas/ChartVersions'
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
        "404":
          $ref: '#/definitions/NotFoundChartAPIError'
        "500":
          $ref: '#/definitions/InternalChartAPIError'
    delete:
      tags:
      - Products
      - Chart Repository
      summary: Delete all the versions of the specified chart
      description: Delete all the versions of the specified chart
      parameters:
      - name: repo
        in: path
        description: The project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The chart name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The specified chart entry is successfully deleted.
          content: {}
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
        "500":
          $ref: '#/definitions/InternalChartAPIError'
  /chartrepo/{repo}/charts/{name}/{version}:
    get:
      tags:
      - Products
      - Chart Repository
      summary: Get the specified chart version
      description: Get the specified chart version
      parameters:
      - name: repo
        in: path
        description: The project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The chart name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The chart version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved the chart version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartVersionDetails'
            text/plain:
              schema:
                $ref: '#/components/schemas/ChartVersionDetails'
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
        "404":
          $ref: '#/definitions/NotFoundChartAPIError'
        "500":
          $ref: '#/definitions/InternalChartAPIError'
    delete:
      tags:
      - Products
      - Chart Repository
      summary: Delete the specified chart version
      description: Delete the specified chart version
      parameters:
      - name: repo
        in: path
        description: The project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The chart name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The chart version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The specified chart entry is successfully deleted.
          content: {}
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
        "404":
          $ref: '#/definitions/NotFoundChartAPIError'
        "500":
          $ref: '#/definitions/InternalChartAPIError'
  /chartrepo/{repo}/prov:
    post:
      tags:
      - Products
      - Chart Repository
      summary: Upload a provance file to the specified project.
      description: Upload a provance file to the specified project. The provance file
        should be targeted for an existing chart file.
      parameters:
      - name: repo
        in: path
        description: The project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_2'
        required: true
      responses:
        "201":
          description: The provance file is successfully uploaded.
          content: {}
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
        "500":
          $ref: '#/definitions/InternalChartAPIError'
        "507":
          $ref: '#/definitions/InsufficientStorageChartAPIError'
  /chartrepo/charts:
    post:
      tags:
      - Products
      - Chart Repository
      summary: Upload a chart file to the defult 'library' project.
      description: Upload a chart file to the default 'library' project. Uploading
        together with the prov file at the same time is also supported.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_3'
        required: true
      responses:
        "201":
          description: The specified chart is successfully uploaded.
          content: {}
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
        "500":
          $ref: '#/definitions/InternalChartAPIError'
        "507":
          $ref: '#/definitions/InsufficientStorageChartAPIError'
  /chartrepo/{repo}/charts/{name}/{version}/labels:
    get:
      tags:
      - Products
      - Chart Repository
      - Label
      summary: Return the attahced labels of chart.
      description: Return the attahced labels of the specified chart version.
      parameters:
      - name: repo
        in: path
        description: The project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The chart name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The chart version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          $ref: '#/definitions/Labels'
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
        "404":
          $ref: '#/definitions/NotFoundChartAPIError'
        "500":
          $ref: '#/definitions/InternalChartAPIError'
    post:
      tags:
      - Products
      - Chart Repository
      - Label
      summary: Mark label to chart.
      description: Mark label to the specified chart version.
      parameters:
      - name: repo
        in: path
        description: The project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The chart name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The chart version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The label being marked to the chart version
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        required: true
      responses:
        "200":
          description: The label is successfully marked to the chart version.
          content: {}
        "400":
          $ref: '#/definitions/BadRequestFormatedError'
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
        "404":
          $ref: '#/definitions/NotFoundChartAPIError'
        "409":
          $ref: '#/definitions/ConflictFormatedError'
        "500":
          $ref: '#/definitions/InternalChartAPIError'
      x-codegen-request-body-name: label
  /chartrepo/{repo}/charts/{name}/{version}/labels/{id}:
    delete:
      tags:
      - Products
      - Chart Repository
      - Label
      summary: Remove label from chart.
      description: Remove label from the specified chart version.
      parameters:
      - name: repo
        in: path
        description: The project name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The chart name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The chart version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The label ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: The label is successfully unmarked from the chart version.
          content: {}
        "400":
          $ref: '#/definitions/BadRequestFormatedError'
        "401":
          $ref: '#/definitions/UnauthorizedChartAPIError'
        "403":
          $ref: '#/definitions/ForbiddenChartAPIError'
        "404":
          $ref: '#/definitions/NotFoundChartAPIError'
        "500":
          $ref: '#/definitions/InternalChartAPIError'
  /projects/{project_id}/robots:
    get:
      tags:
      - Products
      - Robot Account
      summary: Get all robot accounts of specified project
      description: Get all robot accounts of specified project
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get project robot accounts successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RobotAccount'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RobotAccount'
        "400":
          description: The project id is invalid.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the project.
          content: {}
        "404":
          description: Project ID does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    post:
      tags:
      - Products
      - Robot Account
      summary: Create a robot account for project
      description: Create a robot account for project
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Request body of creating a robot account.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RobotAccountCreate'
        required: true
      responses:
        "201":
          description: Project member created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotAccountPostRep'
            text/plain:
              schema:
                $ref: '#/components/schemas/RobotAccountPostRep'
        "400":
          description: Project id is not valid.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the project.
          content: {}
        "409":
          description: An robot account with same name already exist in the project.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: robot
  /projects/{project_id}/robots/{robot_id}:
    get:
      tags:
      - Products
      - Robot Account
      summary: Return the infor of the specified robot account.
      description: Return the infor of the specified robot account.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: robot_id
        in: path
        description: The ID of robot account.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Robot account information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotAccount'
            text/plain:
              schema:
                $ref: '#/components/schemas/RobotAccount'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the project.
          content: {}
        "404":
          description: The robot account is not found.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      - Robot Account
      summary: Update status of robot account.
      description: Used to disable/enable a specified robot account.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: robot_id
        in: path
        description: The ID of robot account.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Request body of enable/disable a robot account.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RobotAccountUpdate'
        required: true
      responses:
        "200":
          description: Robot account has been modified success.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: robot
    delete:
      tags:
      - Products
      - Robot Account
      summary: Delete the specified robot account
      description: Delete the specified robot account
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: robot_id
        in: path
        description: The ID of robot account.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The specified robot account is successfully deleted.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User in session does not have permission to the project.
          content: {}
        "404":
          description: The robot account is not found.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /system/oidc/ping:
    post:
      tags:
      - Products
      - System
      summary: Test the OIDC endpoint.
      description: Test the OIDC endpoint, the setting of the endpoint is provided
        in the request.  This API can only be called by system admin.
      requestBody:
        description: Request body for OIDC endpoint to be tested.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_4'
        required: true
      responses:
        "200":
          description: Ping succeeded.  The OIDC endpoint is valid.
          content: {}
        "400":
          description: The ping failed
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission to call this API
          content: {}
      x-codegen-request-body-name: endpoint
  /system/CVEWhitelist:
    get:
      tags:
      - Products
      - System
      summary: Get the system level whitelist of CVE.
      description: Get the system level whitelist of CVE.  This API can be called
        by all authenticated users.
      responses:
        "200":
          description: Successfully retrieved the CVE whitelist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CVEWhitelist'
            text/plain:
              schema:
                $ref: '#/components/schemas/CVEWhitelist'
        "401":
          description: User is not authenticated.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      - System
      summary: Update the system level whitelist of CVE.
      description: This API overwrites the system level whitelist of CVE with the
        list in request body.  Only system Admin has permission to call this API.
      requestBody:
        description: The whitelist with new content
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CVEWhitelist'
        required: false
      responses:
        "200":
          description: Successfully updated the CVE whitelist.
          content: {}
        "401":
          description: User is not authenticated.
          content: {}
        "403":
          description: User does not have permission to call this API.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: whitelist
  /quotas:
    get:
      tags:
      - Products
      summary: List quotas
      description: List quotas
      parameters:
      - name: reference
        in: query
        description: The reference type of quota.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: reference_id
        in: query
        description: The reference id of quota.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        description: |
          Sort method, valid values include:
          'hard.resource_name', '-hard.resource_name', 'used.resource_name', '-used.resource_name'.
          Here '-' stands for descending order, resource_name should be the real resource name of the quota.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page number, default is 1.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: page_size
        in: query
        description: The size of per page, default is 10, maximum is 100.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Successfully retrieved the quotas.
          headers:
            X-Total-Count:
              description: The total count of access logs
              style: simple
              explode: false
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quota'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quota'
        "401":
          description: User is not authenticated.
          content: {}
        "403":
          description: User does not have permission to call this API.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /quotas/{id}:
    get:
      tags:
      - Products
      - Quota
      summary: Get the specified quota
      description: Get the specified quota
      parameters:
      - name: id
        in: path
        description: Quota ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successfully retrieved the quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quota'
            text/plain:
              schema:
                $ref: '#/components/schemas/Quota'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission to call this API
          content: {}
        "404":
          description: Quota does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      - Quota
      summary: Update the specified quota
      description: Update hard limits of the specified quota
      parameters:
      - name: id
        in: path
        description: Quota ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: The new hard limits for the quota
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotaUpdateReq'
        required: true
      responses:
        "200":
          description: Updated quota hard limits successfully.
          content: {}
        "400":
          description: Illegal format of quota update request.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User does not have permission to the quota.
          content: {}
        "404":
          description: Quota ID does not exist.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: hard
  /projects/{project_id}/webhook/policies:
    get:
      tags:
      - Products
      summary: List project webhook policies.
      description: |
        This endpoint returns webhook policies of a project.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List project webhook policies successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookPolicy'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookPolicy'
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to list webhook policies of the project.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    post:
      tags:
      - Products
      summary: Create project webhook policy.
      description: |
        This endpoint create a webhook policy if the project does not have one.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Properties "targets" and "event_types" needed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPolicy'
        required: true
      responses:
        "201":
          description: Project webhook policy create successfully.
          content: {}
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to create webhook policy of the project.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: policy
  /projects/{project_id}/webhook/policies/{policy_id}:
    get:
      tags:
      - Products
      summary: Get project webhook policy
      description: |
        This endpoint returns specified webhook policy of a project.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: policy_id
        in: path
        description: The id of webhook policy.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get webhook policy successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookPolicy'
            text/plain:
              schema:
                $ref: '#/components/schemas/WebhookPolicy'
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to get webhook policy of the project.
          content: {}
        "404":
          description: Webhook policy ID does not exist.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
    put:
      tags:
      - Products
      summary: Update webhook policy of a project.
      description: |
        This endpoint is aimed to update the webhook policy of a project.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: policy_id
        in: path
        description: The id of webhook policy.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: All properties needed except "id", "project_id", "creation_time",
          "update_time".
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPolicy'
        required: true
      responses:
        "200":
          description: Update webhook policy successfully.
          content: {}
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to update webhook policy of the project.
          content: {}
        "404":
          description: Webhook policy ID does not exist.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
      x-codegen-request-body-name: policy
    delete:
      tags:
      - Products
      summary: Delete webhook policy of a project
      description: |
        This endpoint is aimed to delete webhookpolicy of a project.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: policy_id
        in: path
        description: The id of webhook policy.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Delete webhook policy successfully.
          content: {}
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to delete webhook policy of the project.
          content: {}
        "404":
          description: Webhook policy ID does not exist.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
  /projects/{project_id}/webhook/policies/test:
    post:
      tags:
      - Products
      summary: Test project webhook connection
      description: |
        This endpoint tests webhook connection of a project.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Only property "targets" needed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPolicy'
        required: true
      responses:
        "200":
          description: Test webhook connection successfully.
          content: {}
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to get webhook policy of the project.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
      x-codegen-request-body-name: policy
  /projects/{project_id}/webhook/lasttrigger:
    get:
      tags:
      - Products
      summary: Get project webhook policy last trigger info
      description: |
        This endpoint returns last trigger information of project webhook policy.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Test webhook connection successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookLastTrigger'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookLastTrigger'
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to get webhook policy of the project.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
  /projects/{project_id}/webhook/jobs:
    get:
      tags:
      - Products
      summary: List project webhook jobs
      description: |
        This endpoint returns webhook jobs of a project.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: policy_id
        in: query
        description: The policy ID.
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List project webhook jobs successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookJob'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookJob'
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to list webhook jobs of the project.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /projects/{project_id}/immutabletagrules:
    get:
      tags:
      - Products
      summary: List all immutable tag rules of current project
      description: |
        This endpoint returns the immutable tag rules of a project
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List project immutable tag rules successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImmutableTagRule'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImmutableTagRule'
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to list immutable tag rules of the
            project.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    post:
      tags:
      - Products
      summary: Add an immutable tag rule to current project
      description: |
        This endpoint add an immutable tag rule to the project
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImmutableTagRule'
        required: false
      responses:
        "200":
          description: Add the immutable tag rule successfully.
          content: {}
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to get immutable tag rule of the project.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
      x-codegen-request-body-name: immutabletagrule
  /projects/{project_id}/immutabletagrules/{id}:
    put:
      tags:
      - Products
      summary: Update the immutable tag rule or enable or disable the rule
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        description: Immutable tag rule ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImmutableTagRule'
        required: false
      responses:
        "200":
          description: Update the immutable tag rule successfully.
          content: {}
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to update the immutable tag rule of
            the project.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
      x-codegen-request-body-name: immutabletagrule
    delete:
      tags:
      - Products
      summary: Delete the immutable tag rule.
      parameters:
      - name: project_id
        in: path
        description: Relevant project ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        description: Immutable tag rule ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Delete the immutable tag rule successfully.
          content: {}
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission to delete immutable tags of the project.
          content: {}
        "500":
          description: Internal server errors.
          content: {}
  /retentions/metadatas:
    get:
      tags:
      - Products
      - Retention
      summary: Get Retention Metadatas
      description: Get Retention Metadatas.
      responses:
        "200":
          description: Get Retention Metadatas successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionMetadata'
            text/plain:
              schema:
                $ref: '#/components/schemas/RetentionMetadata'
  /retentions:
    post:
      tags:
      - Products
      - Retention
      summary: Create Retention Policy
      description: |
        Create Retention Policy, you can reference metadatas API for the policy model.
        You can check project metadatas to find whether a retention policy is already binded.
        This method should only be called when no retention policy binded to project yet.
      requestBody:
        description: Create Retention Policy successfully.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetentionPolicy'
        required: true
      responses:
        "201":
          description: Project created successfully.
          content: {}
        "400":
          description: Illegal format of provided ID value.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: policy
  /retentions/{id}:
    get:
      tags:
      - Products
      - Retention
      summary: Get Retention Policy
      description: Get Retention Policy.
      parameters:
      - name: id
        in: path
        description: Retention ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get Retention Policy successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionPolicy'
            text/plain:
              schema:
                $ref: '#/components/schemas/RetentionPolicy'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    put:
      tags:
      - Products
      summary: Update Retention Policy
      description: |
        Update Retention Policy, you can reference metadatas API for the policy model.
        You can check project metadatas to find whether a retention policy is already binded.
        This method should only be called when retention policy has already binded to project.
      parameters:
      - name: id
        in: path
        description: Retention ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetentionPolicy'
        required: true
      responses:
        "200":
          description: Update Retention Policy successfully.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: policy
  /retentions/{id}/executions:
    get:
      tags:
      - Products
      - Retention
      summary: Get a Retention job
      description: Get a Retention job, job status may be delayed before job service
        schedule it up.
      parameters:
      - name: id
        in: path
        description: Retention ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get a Retention job successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetentionExecution'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetentionExecution'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
    post:
      tags:
      - Products
      - Retention
      summary: Trigger a Retention job
      description: Trigger a Retention job, if dry_run is True, nothing would be deleted
        actually.
      parameters:
      - name: id
        in: path
        description: Retention ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_5'
        required: true
      responses:
        "200":
          description: Trigger a Retention job successfully.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: action
  /retentions/{id}/executions/{eid}:
    patch:
      tags:
      - Products
      - Retention
      summary: Stop a Retention job
      description: Stop a Retention job, only support "stop" action now.
      parameters:
      - name: id
        in: path
        description: Retention ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: eid
        in: path
        description: Retention execution ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: The action, only support "stop" now.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_6'
        required: true
      responses:
        "200":
          description: Stop a Retention job successfully.
          content: {}
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
      x-codegen-request-body-name: action
  /retentions/{id}/executions/{eid}/tasks:
    get:
      tags:
      - Products
      - Retention
      summary: Get Retention job tasks
      description: Get Retention job tasks, each repository as a task.
      parameters:
      - name: id
        in: path
        description: Retention ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: eid
        in: path
        description: Retention execution ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get Retention job tasks successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetentionExecutionTask'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetentionExecutionTask'
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /retentions/{id}/executions/{eid}/tasks/{tid}:
    get:
      tags:
      - Products
      - Retention
      summary: Get Retention job task log
      description: Get Retention job task log, tags ratain or deletion detail will
        be shown in a table.
      parameters:
      - name: id
        in: path
        description: Retention ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: eid
        in: path
        description: Retention execution ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: tid
        in: path
        description: Retention execution ID.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Get Retention job task log successfully.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "401":
          description: User need to log in first.
          content: {}
        "403":
          description: User have no permission.
          content: {}
        "500":
          description: Unexpected internal errors.
          content: {}
  /scanners:
    get:
      tags:
      - Products
      - Scanners
      summary: List scanner registrations
      description: |
        Returns a list of currently configured scanner registrations.
      responses:
        "200":
          description: A list of scanner registrations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScannerRegistration'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScannerRegistration'
        "400":
          description: Bad query paramters
          content: {}
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed, system role required
          content: {}
        "500":
          description: Internal server error happened
          content: {}
    post:
      tags:
      - Scanners
      summary: Create a scanner registration
      description: |
        Creats a new scanner registration with the given data.
      requestBody:
        description: A scanner registration to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScannerRegistrationReq'
        required: true
      responses:
        "201":
          description: Created successfully
          content: {}
        "400":
          description: Bad registration request
          content: {}
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed, system role required
          content: {}
        "500":
          description: Internal server error happened
          content: {}
      x-codegen-request-body-name: registration
  /scanners/ping:
    post:
      tags:
      - Products
      - Scanners
      summary: Tests scanner registration settings
      description: |
        Pings scanner adapter to test endpoint URL and authorization settings.
      requestBody:
        description: A scanner registration settings to be tested.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScannerRegistrationSettings'
        required: true
      responses:
        "200":
          description: Test succeeded
          content: {}
        "400":
          description: Bad registration settings
          content: {}
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed, system role required
          content: {}
        "500":
          description: Internal server error happened
          content: {}
      x-codegen-request-body-name: settings
  /scanners/{registration_id}:
    get:
      tags:
      - Products
      - Scanners
      summary: Get a scanner registration details
      description: |
        Retruns the details of the specified scanner registration.
      parameters:
      - name: registration_id
        in: path
        description: The scanner registration identifer.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The details of the scanner registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed, system role required
          content: {}
        "404":
          description: The requested object is not found
          content: {}
        "500":
          description: Internal server error happened
          content: {}
    put:
      tags:
      - Scanners
      summary: Update a scanner registration
      description: |
        Updates the specified scanner registration.
      parameters:
      - name: registration_id
        in: path
        description: The scanner registration identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: A scanner registraiton to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScannerRegistrationReq'
        required: true
      responses:
        "200":
          description: Updated successfully
          content: {}
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed, system role required
          content: {}
        "404":
          description: The requested object is not found
          content: {}
        "500":
          description: Internal server error happened
          content: {}
      x-codegen-request-body-name: registration
    delete:
      tags:
      - Scanners
      summary: Delete a scanner registration
      description: |
        Deletes the specified scanner registration.
      parameters:
      - name: registration_id
        in: path
        description: The scanner registration identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Deleted successfully and return the deleted registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed, system role required or registration
            is immutable
          content: {}
        "404":
          description: The requested object is not found
          content: {}
        "500":
          description: Internal server error happened
          content: {}
    patch:
      tags:
      - Scanners
      summary: Set system default scanner registration
      description: |
        Set the specified scanner registration as the system default one.
      parameters:
      - name: registration_id
        in: path
        description: The scanner registration identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IsDefault'
        required: true
      responses:
        "200":
          description: Successfully set the specified scanner registration as system
            default
          content: {}
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed
          content: {}
        "500":
          description: Internal server error happened
          content: {}
      x-codegen-request-body-name: payload
  /scanners/{registration_id}/metadata:
    get:
      tags:
      - Products
      - Scanners
      summary: Get the metadata of the specified scanner registration
      description: |
        Get the metadata of the specified scanner registration, including the capabilities and customzied properties.
      parameters:
      - name: registration_id
        in: path
        description: The scanner registration identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The metadata of the specified scanner adapter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerAdapterMetadata'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScannerAdapterMetadata'
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed
          content: {}
        "500":
          description: Internal server error happened
          content: {}
  /projects/{project_id}/scanner:
    get:
      tags:
      - Products
      - Scanners
      summary: Get project level scanner
      description: Get the scanner registration of the specified project. If no scanner
        registration is configured for the specified project, the system default scanner
        registration will be returned.
      parameters:
      - name: project_id
        in: path
        description: The project identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The details of the scanner registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
        "400":
          description: Bad project ID
          content: {}
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed
          content: {}
        "404":
          description: The requested object is not found
          content: {}
        "500":
          description: Internal server error happened
          content: {}
    put:
      tags:
      - Scanners
      summary: Configure scanner for the specified project
      description: Set one of the system configured scanner registration as the indepndent
        scanner of the specified project.
      parameters:
      - name: project_id
        in: path
        description: The project identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectScanner'
        required: true
      responses:
        "200":
          description: Successfully set the project level scanner
          content: {}
        "400":
          description: Bad project ID
          content: {}
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed
          content: {}
        "404":
          description: The requested object is not found
          content: {}
        "500":
          description: Internal server error happened
          content: {}
      x-codegen-request-body-name: payload
  /projects/{project_id}/scanner/candidates:
    get:
      tags:
      - Products
      - Scanners
      summary: Get scanner registration candidates for configurating project level
        scanner
      description: |
        Retrieve the system configured scanner registrations as candidates of setting project level scanner.
      parameters:
      - name: project_id
        in: path
        description: The project identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: A list of scanner registrations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScannerRegistration'
                x-content-type: application/json
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScannerRegistration'
        "400":
          description: Bad project ID or query parameters
          content: {}
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed
          content: {}
        "500":
          description: Internal server error happened
          content: {}
  /repositories/{repo_name}/tags/{tag}/scan:
    get:
      tags:
      - Scan
      summary: Get the scan report
      description: |
        Retrieve the scan report for the artifact identified by the repo_name and tag.
      parameters:
      - name: repo_name
        in: path
        description: Repository name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tag
        in: path
        description: Tag name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Accept
        in: header
        description: |
          Mimetype in header. e.g: "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
        required: false
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The report details of the specified artifact identified by
            the repo_name and tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
            text/plain:
              schema:
                $ref: '#/components/schemas/Report'
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed
          content: {}
        "404":
          description: The target artifact is not found
          content: {}
        "500":
          description: Internal server error happened
          content: {}
    post:
      tags:
      - Products
      - Scan
      summary: Scan the image.
      description: |
        Trigger a scan targeting the artifact identified by the repo_name and tag.
      parameters:
      - name: repo_name
        in: path
        description: Repository name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tag
        in: path
        description: Tag name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "202":
          description: Scan request is successfully accepted
          content: {}
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed
          content: {}
        "404":
          description: The target artifact is not found
          content: {}
        "500":
          description: Internal server error happened
          content: {}
  /repositories/{repo_name}/tags/{tag}/scan/{uuid}/log:
    get:
      tags:
      - Products
      - Scan
      summary: Get scan log
      description: Get the log text stream for the given artifact and scan action.
      parameters:
      - name: repo_name
        in: path
        description: Repository name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tag
        in: path
        description: Tag name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: uuid
        in: path
        description: the scan unique identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: The scan log text
                x-content-type: text/plain
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed
          content: {}
        "404":
          description: The target artifact is not found
          content: {}
        "500":
          description: Internal server error happened
          content: {}
  /scans/all/metrics:
    get:
      tags:
      - Products
      - Scan
      summary: Get the metrics of the latest scan all process
      description: Get the metrics of the latest scan all process
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
            text/plain:
              schema:
                $ref: '#/components/schemas/Stats'
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed
          content: {}
        "500":
          description: Internal server error happened
          content: {}
  /scans/schedule/metrics:
    get:
      tags:
      - Products
      - Scan
      summary: Get the metrics of the latest scheduled scan all process
      description: Get the metrics of the latest scheduled scan all process
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
            text/plain:
              schema:
                $ref: '#/components/schemas/Stats'
        "401":
          description: Unauthorized request
          content: {}
        "403":
          description: Request is not allowed
          content: {}
        "500":
          description: Internal server error happened
          content: {}
components:
  schemas:
    Search:
      type: object
      properties:
        project:
          type: array
          description: Search results of the projects that matched the filter keywords.
          items:
            $ref: '#/components/schemas/Project'
        repository:
          type: array
          description: Search results of the repositories that matched the filter
            keywords.
          items:
            $ref: '#/components/schemas/SearchRepository'
        chart:
          type: array
          description: Search results of the charts that macthed the filter keywords.
          items:
            $ref: '#/components/schemas/SearchResult'
      example:
        project:
        - creation_time: creation_time
          togglable: true
          metadata:
            severity: severity
            prevent_vul: prevent_vul
            public: public
            auto_scan: auto_scan
            reuse_sys_cve_whitelist: reuse_sys_cve_whitelist
            enable_content_trust: enable_content_trust
          owner_name: owner_name
          owner_id: 6
          repo_count: 5
          cve_whitelist:
            expires_at: 3
            project_id: 9
            id: 7
            items:
            - cve_id: cve_id
            - cve_id: cve_id
          update_time: update_time
          current_user_role_id: 1
          deleted: true
          project_id: 0
          name: name
          current_user_role_ids:
          - 5
          - 5
          chart_count: 2
        - creation_time: creation_time
          togglable: true
          metadata:
            severity: severity
            prevent_vul: prevent_vul
            public: public
            auto_scan: auto_scan
            reuse_sys_cve_whitelist: reuse_sys_cve_whitelist
            enable_content_trust: enable_content_trust
          owner_name: owner_name
          owner_id: 6
          repo_count: 5
          cve_whitelist:
            expires_at: 3
            project_id: 9
            id: 7
            items:
            - cve_id: cve_id
            - cve_id: cve_id
          update_time: update_time
          current_user_role_id: 1
          deleted: true
          project_id: 0
          name: name
          current_user_role_ids:
          - 5
          - 5
          chart_count: 2
        repository:
        - project_id: 2
          tags_count: 7
          project_name: project_name
          repository_name: repository_name
          pull_count: 4
          project_public: true
        - project_id: 2
          tags_count: 7
          project_name: project_name
          repository_name: repository_name
          pull_count: 4
          project_public: true
        chart:
        - score: 1
          name: name
          chart:
            labels:
            - creation_time: creation_time
              update_time: update_time
              deleted: true
              color: color
              project_id: 1
              scope: scope
              name: name
              description: description
              id: 1
            - creation_time: creation_time
              update_time: update_time
              deleted: true
              color: color
              project_id: 1
              scope: scope
              name: name
              description: description
              id: 1
        - score: 1
          name: name
          chart:
            labels:
            - creation_time: creation_time
              update_time: update_time
              deleted: true
              color: color
              project_id: 1
              scope: scope
              name: name
              description: description
              id: 1
            - creation_time: creation_time
              update_time: update_time
              deleted: true
              color: color
              project_id: 1
              scope: scope
              name: name
              description: description
              id: 1
    RetagReq:
      type: object
      properties:
        tag:
          type: string
          description: new tag to be created
        src_image:
          type: string
          description: Source image to be retagged, e.g. 'stage/app:v1.0'
        override:
          type: boolean
          description: If target tag already exists, whether to override it
    SearchRepository:
      type: object
      properties:
        project_id:
          type: integer
          description: The ID of the project that the repository belongs to
        project_name:
          type: string
          description: The name of the project that the repository belongs to
        project_public:
          type: boolean
          description: The flag to indicate the publicity of the project that the
            repository belongs to (1 is public, 0 is not)
        repository_name:
          type: string
          description: The name of the repository
        pull_count:
          type: integer
          description: The count how many times the repository is pulled
        tags_count:
          type: integer
          description: The count of tags in the repository
      example:
        project_id: 2
        tags_count: 7
        project_name: project_name
        repository_name: repository_name
        pull_count: 4
        project_public: true
    ProjectReq:
      type: object
      properties:
        project_name:
          type: string
          description: The name of the project.
        metadata:
          $ref: '#/components/schemas/ProjectMetadata'
        cve_whitelist:
          $ref: '#/components/schemas/CVEWhitelist'
        count_limit:
          type: integer
          description: The count quota of the project.
          format: int64
        storage_limit:
          type: integer
          description: The storage quota of the project.
          format: int64
    Project:
      type: object
      properties:
        project_id:
          type: integer
          description: Project ID
          format: int32
        owner_id:
          type: integer
          description: The owner ID of the project always means the creator of the
            project.
          format: int32
        name:
          type: string
          description: The name of the project.
        creation_time:
          type: string
          description: The creation time of the project.
        update_time:
          type: string
          description: The update time of the project.
        deleted:
          type: boolean
          description: A deletion mark of the project.
        owner_name:
          type: string
          description: The owner name of the project.
        togglable:
          type: boolean
          description: Correspond to the UI about whether the project's publicity
            is  updatable (for UI)
        current_user_role_id:
          type: integer
          description: The role ID with highest permission of the current user who
            triggered the API (for UI)
        current_user_role_ids:
          type: array
          description: The list of role ID of the current user who triggered the API
            (for UI)
          items:
            type: integer
            format: int32
        repo_count:
          type: integer
          description: The number of the repositories under this project.
        chart_count:
          type: integer
          description: The total number of charts under this project.
        metadata:
          $ref: '#/components/schemas/ProjectMetadata'
        cve_whitelist:
          $ref: '#/components/schemas/CVEWhitelist'
      example:
        creation_time: creation_time
        togglable: true
        metadata:
          severity: severity
          prevent_vul: prevent_vul
          public: public
          auto_scan: auto_scan
          reuse_sys_cve_whitelist: reuse_sys_cve_whitelist
          enable_content_trust: enable_content_trust
        owner_name: owner_name
        owner_id: 6
        repo_count: 5
        cve_whitelist:
          expires_at: 3
          project_id: 9
          id: 7
          items:
          - cve_id: cve_id
          - cve_id: cve_id
        update_time: update_time
        current_user_role_id: 1
        deleted: true
        project_id: 0
        name: name
        current_user_role_ids:
        - 5
        - 5
        chart_count: 2
    ProjectMetadata:
      type: object
      properties:
        public:
          type: string
          description: The public status of the project. The valid values are "true",
            "false".
        enable_content_trust:
          type: string
          description: Whether content trust is enabled or not. If it is enabled,
            user can't pull unsigned images from this project. The valid values are
            "true", "false".
        prevent_vul:
          type: string
          description: Whether prevent the vulnerable images from running. The valid
            values are "true", "false".
        severity:
          type: string
          description: If the vulnerability is high than severity defined here, the
            images can't be pulled. The valid values are "none", "low", "medium",
            "high", "critical".
        auto_scan:
          type: string
          description: Whether scan images automatically when pushing. The valid values
            are "true", "false".
        reuse_sys_cve_whitelist:
          type: string
          description: Whether this project reuse the system level CVE whitelist as
            the whitelist of its own.  The valid values are "true", "false". If it
            is set to "true" the actual whitelist associate with this project, if
            any, will be ignored.
      example:
        severity: severity
        prevent_vul: prevent_vul
        public: public
        auto_scan: auto_scan
        reuse_sys_cve_whitelist: reuse_sys_cve_whitelist
        enable_content_trust: enable_content_trust
    ProjectSummary:
      type: object
      properties:
        repo_count:
          type: integer
          description: The number of the repositories under this project.
        chart_count:
          type: integer
          description: The total number of charts under this project.
        project_admin_count:
          type: integer
          description: The total number of project admin members.
        master_count:
          type: integer
          description: The total number of master members.
        developer_count:
          type: integer
          description: The total number of developer members.
        guest_count:
          type: integer
          description: The total number of guest members.
        quota:
          $ref: '#/components/schemas/ProjectSummary_quota'
      example:
        quota:
          hard:
            key: 7
        guest_count: 2
        developer_count: 5
        repo_count: 0
        project_admin_count: 1
        master_count: 5
        chart_count: 6
    Manifest:
      type: object
      properties:
        manifest:
          type: object
          properties: {}
          description: The detail of manifest.
          example: {}
        config:
          type: string
          description: The config of the repository.
      example:
        manifest: {}
        config: config
    User:
      type: object
      properties:
        user_id:
          type: integer
          description: The ID of the user.
          format: int
        username:
          type: string
        email:
          type: string
        password:
          type: string
        realname:
          type: string
        comment:
          type: string
        deleted:
          type: boolean
        role_name:
          type: string
        role_id:
          type: integer
          format: int
        has_admin_role:
          type: boolean
        reset_uuid:
          type: string
        Salt:
          type: string
        creation_time:
          type: string
        update_time:
          type: string
      example:
        creation_time: creation_time
        has_admin_role: true
        realname: realname
        role_name: role_name
        Salt: Salt
        password: password
        update_time: update_time
        deleted: true
        user_id: 0
        role_id: 6
        comment: comment
        email: email
        username: username
        reset_uuid: reset_uuid
    UserSearch:
      type: object
      properties:
        user_id:
          type: integer
          description: The ID of the user.
          format: int
        username:
          type: string
      example:
        user_id: 0
        username: username
    Password:
      type: object
      properties:
        old_password:
          type: string
          description: The user's existing password.
        new_password:
          type: string
          description: New password for marking as to be updated.
    AccessLog:
      type: object
      properties:
        log_id:
          type: integer
          description: The ID of the log entry.
        username:
          type: string
          description: Username of the user in this log entry.
        repo_name:
          type: string
          description: Name of the repository in this log entry.
        repo_tag:
          type: string
          description: Tag of the repository in this log entry.
        operation:
          type: string
          description: The operation against the repository in this log entry.
        op_time:
          type: string
          description: The time when this operation is triggered.
      example:
        log_id: 0
        op_time: op_time
        repo_name: repo_name
        operation: operation
        repo_tag: repo_tag
        username: username
    Role:
      type: object
      properties:
        role_id:
          type: integer
          description: ID in table.
          format: int32
        role_code:
          type: string
          description: Description of permissions for the role.
        role_name:
          type: string
          description: Name the the role.
        role_mask:
          type: string
    RoleParam:
      type: object
      properties:
        roles:
          type: array
          description: Role ID for updating project role member.
          items:
            type: integer
            format: int32
        username:
          type: string
          description: Username relevant to a project role member.
    StatisticMap:
      type: object
      properties:
        private_project_count:
          type: integer
          description: The count of the private projects which the user is a member
            of.
          format: int32
        private_repo_count:
          type: integer
          description: The count of the private repositories belonging to the projects
            which the user is a member of.
          format: int32
        public_project_count:
          type: integer
          description: The count of the public projects.
          format: int32
        public_repo_count:
          type: integer
          description: The count of the public repositories belonging to the public
            projects which the user is a member of.
          format: int32
        total_project_count:
          type: integer
          description: The count of the total projects, only be seen when the is admin.
          format: int32
        total_repo_count:
          type: integer
          description: The count of the total repositories, only be seen when the
            user is admin.
          format: int32
      example:
        private_project_count: 0
        public_repo_count: 5
        total_repo_count: 2
        total_project_count: 5
        private_repo_count: 6
        public_project_count: 1
    JobStatus:
      type: object
      properties:
        id:
          type: integer
          description: The job ID.
          format: int64
        status:
          type: string
          description: The status of the job.
        repository:
          type: string
          description: The repository handled by the job.
        policy_id:
          type: integer
          description: The ID of the policy that triggered this job.
          format: int64
        operation:
          type: string
          description: The operation of the job.
        tags:
          type: array
          description: The repository's used tag list.
          items:
            $ref: '#/components/schemas/Tags'
        creation_time:
          type: string
          description: The creation time of the job.
        update_time:
          type: string
          description: The update time of the job.
    Tags:
      type: object
      properties:
        tag:
          type: string
          description: The repository's used tag.
    ReplicationPolicy:
      type: object
      properties:
        id:
          type: integer
          description: The policy ID.
          format: int64
        name:
          type: string
          description: The policy name.
        description:
          type: string
          description: The description of the policy.
        src_registry:
          $ref: '#/components/schemas/Registry'
        dest_registry:
          $ref: '#/components/schemas/Registry'
        dest_namespace:
          type: string
          description: The destination namespace.
        trigger:
          $ref: '#/components/schemas/ReplicationTrigger'
        filters:
          type: array
          description: The replication policy filter array.
          items:
            $ref: '#/components/schemas/ReplicationFilter'
        deletion:
          type: boolean
          description: Whether to replicate the deletion operation.
        override:
          type: boolean
          description: Whether to override the resources on the destination registry.
        enabled:
          type: boolean
          description: Whether the policy is enabled or not.
        creation_time:
          type: string
          description: The create time of the policy.
        update_time:
          type: string
          description: The update time of the policy.
      example:
        creation_time: creation_time
        description: description
        trigger:
          trigger_settings:
            cron: cron
          type: type
        filters:
        - type: type
          value: value
        - type: type
          value: value
        enabled: true
        update_time: update_time
        src_registry:
          creation_time: creation_time
          update_time: update_time
          credential:
            access_key: access_key
            access_secret: access_secret
            type: type
          name: name
          insecure: true
          description: description
          id: 6
          type: type
          url: url
          status: status
        deletion: true
        name: name
        dest_namespace: dest_namespace
        id: 0
        override: true
    ReplicationTrigger:
      type: object
      properties:
        type:
          type: string
          description: The replication policy trigger type. The valid values are manual,
            event_based and scheduled.
        trigger_settings:
          $ref: '#/components/schemas/TriggerSettings'
      example:
        trigger_settings:
          cron: cron
        type: type
    TriggerSettings:
      type: object
      properties:
        cron:
          type: string
          description: The cron string for scheduled trigger
      example:
        cron: cron
    ReplicationFilter:
      type: object
      properties:
        type:
          type: string
          description: The replication policy filter type.
        value:
          type: string
          description: The value of replication policy filter.
      example:
        type: type
        value: value
    RegistryCredential:
      type: object
      properties:
        type:
          type: string
          description: Credential type, such as 'basic', 'oauth'.
        access_key:
          type: string
          description: Access key, e.g. user name when credential type is 'basic'.
        access_secret:
          type: string
          description: Access secret, e.g. password when credential type is 'basic'.
      example:
        access_key: access_key
        access_secret: access_secret
        type: type
    Registry:
      type: object
      properties:
        id:
          type: integer
          description: The registry ID.
          format: int64
        url:
          type: string
          description: The registry URL string.
        name:
          type: string
          description: The registry name.
        credential:
          $ref: '#/components/schemas/RegistryCredential'
        type:
          type: string
          description: Type of the registry, e.g. 'harbor'.
        insecure:
          type: boolean
          description: Whether or not the certificate will be verified when Harbor
            tries to access the server.
        description:
          type: string
          description: Description of the registry.
        status:
          type: string
          description: Health status of the registry.
        creation_time:
          type: string
          description: The create time of the policy.
        update_time:
          type: string
          description: The update time of the policy.
      example:
        creation_time: creation_time
        update_time: update_time
        credential:
          access_key: access_key
          access_secret: access_secret
          type: type
        name: name
        insecure: true
        description: description
        id: 6
        type: type
        url: url
        status: status
    PingRegistry:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the registry
        type:
          type: string
          description: Type of the registry, e.g. 'harbor'.
        url:
          type: string
          description: The registry address URL string.
        credential_type:
          type: string
          description: Credential type of the registry, e.g. 'basic'.
        access_key:
          type: string
          description: The registry access key.
        access_secret:
          type: string
          description: The registry access secret.
        insecure:
          type: boolean
          description: Whether or not the certificate will be verified when Harbor
            tries to access the server.
    PutRegistry:
      type: object
      properties:
        name:
          type: string
          description: The registry name.
        description:
          type: string
          description: Description of the registry.
        url:
          type: string
          description: The registry address URL string.
        credential_type:
          type: string
          description: Credential type of the registry, e.g. 'basic'.
        access_key:
          type: string
          description: The registry access key.
        access_secret:
          type: string
          description: The registry access secret.
        insecure:
          type: boolean
          description: Whether or not the certificate will be verified when Harbor
            tries to access the server.
    HasAdminRole:
      type: object
      properties:
        has_admin_role:
          type: boolean
          description: 1-has admin, 0-not.
    UserProfile:
      type: object
      properties:
        email:
          type: string
          description: The new email.
        realname:
          type: string
          description: The new realname.
        comment:
          type: string
          description: The new comment.
    Storage:
      type: object
      properties:
        total:
          type: integer
          description: Total volume size.
          format: int64
        free:
          type: integer
          description: Free volume size.
          format: int64
      example:
        total: 0
        free: 6
    GeneralInfo:
      type: object
      properties:
        with_notary:
          type: boolean
          description: If the Harbor instance is deployed with nested notary.
        with_clair:
          type: boolean
          description: If the Harbor instance is deployed with nested clair.
        with_admiral:
          type: boolean
          description: If the Harbor instance is deployed with Admiral.
        admiral_endpoint:
          type: string
          description: The url of the endpoint of admiral instance.
        registry_url:
          type: string
          description: The url of registry against which the docker command should
            be issued.
        external_url:
          type: string
          description: The external URL of Harbor, with protocol.
        auth_mode:
          type: string
          description: The auth mode of current Harbor instance.
        project_creation_restriction:
          type: string
          description: Indicate who can create projects, it could be 'adminonly' or
            'everyone'.
        self_registration:
          type: boolean
          description: Indicate whether the Harbor instance enable user to register
            himself.
        has_ca_root:
          type: boolean
          description: Indicate whether there is a ca root cert file ready for download
            in the file system.
        harbor_version:
          type: string
          description: The build version of Harbor.
        next_scan_all:
          type: integer
          description: The UTC time in milliseconds, after which user can call scanAll
            API to scan all images.
        clair_vulnerability_status:
          $ref: '#/components/schemas/GeneralInfo_clair_vulnerability_status'
      example:
        registry_url: registry_url
        self_registration: true
        admiral_endpoint: admiral_endpoint
        auth_mode: auth_mode
        with_notary: true
        project_creation_restriction: project_creation_restriction
        with_clair: true
        with_admiral: true
        external_url: external_url
        has_ca_root: true
        clair_vulnerability_status:
          overall_last_update: 6
          details:
          - last_update: 1
            namespace: namespace
          - last_update: 1
            namespace: namespace
        harbor_version: harbor_version
        next_scan_all: 0
    VulnNamespaceTimestamp:
      type: object
      properties:
        namespace:
          type: string
          description: The namespace of the Vulnerability
        last_update:
          type: integer
          description: The UTC timestamp in miliseconds of last successful update
            for vulnerability data.
      example:
        last_update: 1
        namespace: namespace
    SystemInfo:
      type: object
      properties:
        storage:
          type: array
          description: The storage of system.
          items:
            $ref: '#/components/schemas/Storage'
      example:
        storage:
        - total: 0
          free: 6
        - total: 0
          free: 6
    LdapConf:
      type: object
      properties:
        ldap_url:
          type: string
          description: The url of ldap service.
        ldap_search_dn:
          type: string
          description: The search dn of ldap service.
        ldap_search_password:
          type: string
          description: The search password of ldap service.
        ldap_base_dn:
          type: string
          description: The base dn of ldap service.
        ldap_filter:
          type: string
          description: The serach filter of ldap service.
        ldap_uid:
          type: string
          description: The serach uid from ldap service attributes.
        ldap_scope:
          type: integer
          description: The serach scope of ldap service.
          format: int64
        ldap_connection_timeout:
          type: integer
          description: The connect timeout of ldap service(second).
          format: int64
    LdapUsers:
      type: object
      properties:
        ldap_username:
          type: string
          description: search ldap user name based on ldapconf.
        ldap_realname:
          type: string
          description: system will try to guess the user realname form "uid" or "cn"
            attribute.
        ldap_email:
          type: string
          description: system will try to guess the user email address form "mail"
            or "email" attribute.
      example:
        ldap_realname: ldap_realname
        ldap_email: ldap_email
        ldap_username: ldap_username
    LdapImportUsers:
      type: object
      properties:
        ldap_uid_list:
          type: array
          description: selected uid list
          items:
            type: string
    LdapFailedImportUsers:
      type: object
      properties:
        ldap_uid:
          type: string
          description: the uid can't add to system.
        error:
          type: string
          description: fail reason.
    EmailServerSetting:
      type: object
      properties:
        email_host:
          type: string
          description: The host of email server.
        email_port:
          type: integer
          description: The port of email server.
        email_username:
          type: string
          description: The username of email server.
        email_password:
          type: string
          description: The password of email server.
        email_ssl:
          type: boolean
          description: Use ssl/tls or not.
        email_identity:
          type: string
          description: The dentity of email server.
    RepoSignature:
      type: object
      properties:
        tag:
          type: string
          description: The tag of image.
        hashes:
          type: object
          properties: {}
          description: The JSON object of the hash of the image.
          example: {}
      example:
        hashes: {}
        tag: tag
    DetailedTag:
      type: object
      properties:
        digest:
          type: string
          description: The digest of the tag.
        name:
          type: string
          description: The name of the tag.
        size:
          type: integer
          description: The size of the image.
        architecture:
          type: string
          description: The architecture of the image.
        os:
          type: string
          description: The os of the image.
        docker_version:
          type: string
          description: The version of docker which builds the image.
        author:
          type: string
          description: The author of the image.
        created:
          type: string
          description: The build time of the image.
        signature:
          type: object
          properties: {}
          description: The signature of image, defined by RepoSignature. If it is
            null, the image is unsigned.
          example: {}
        scan_overview:
          $ref: '#/components/schemas/ScanOverview'
        labels:
          type: array
          description: The label list.
          items:
            $ref: '#/components/schemas/Label'
      example:
        size: 0
        os: os
        signature: {}
        author: author
        created: created
        digest: digest
        name: name
        scan_overview:
          key:
            severity: High
            duration: 300
            summary:
              summary:
                Critical: 5
                High: 5
              total: 500
              fixable: 100
            start_time: 2000-01-23T04:56:07.000+00:00
            scan_status: Success
            report_id: 5f62c830-f996-11e9-957f-0242c0a89008
            end_time: 2000-01-23T04:56:07.000+00:00
        docker_version: docker_version
        architecture: architecture
        labels:
        - creation_time: creation_time
          update_time: update_time
          deleted: true
          color: color
          project_id: 1
          scope: scope
          name: name
          description: description
          id: 1
        - creation_time: creation_time
          update_time: update_time
          deleted: true
          color: color
          project_id: 1
          scope: scope
          name: name
          description: description
          id: 1
    ComponentOverviewEntry:
      type: object
      properties:
        severity:
          type: integer
          description: 1-None/Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High
        count:
          type: integer
          description: number of the components with certain severity.
    Repository:
      type: object
      properties:
        id:
          type: integer
          description: The ID of repository.
        name:
          type: string
          description: The name of repository.
        project_id:
          type: integer
          description: The project ID of repository.
        description:
          type: string
          description: The description of repository.
        pull_count:
          type: integer
          description: The pull count of repository.
        star_count:
          type: integer
          description: The star count of repository.
        tags_count:
          type: integer
          description: The tags count of repository.
        labels:
          type: array
          description: The label list.
          items:
            $ref: '#/components/schemas/Label'
        creation_time:
          type: string
          description: The creation time of repository.
        update_time:
          type: string
          description: The update time of repository.
      example:
        creation_time: creation_time
        update_time: update_time
        project_id: 6
        tags_count: 5
        name: name
        description: description
        id: 0
        pull_count: 1
        star_count: 5
        labels:
        - creation_time: creation_time
          update_time: update_time
          deleted: true
          color: color
          project_id: 1
          scope: scope
          name: name
          description: description
          id: 1
        - creation_time: creation_time
          update_time: update_time
          deleted: true
          color: color
          project_id: 1
          scope: scope
          name: name
          description: description
          id: 1
    Configurations:
      type: object
      properties:
        auth_mode:
          type: string
          description: The auth mode of current system, such as "db_auth", "ldap_auth"
        count_per_project:
          type: string
          description: The default count quota for the new created projects.
        email_from:
          type: string
          description: The sender name for Email notification.
        email_host:
          type: string
          description: The hostname of SMTP server that sends Email notification.
        email_port:
          type: integer
          description: The port of SMTP server.
        email_identity:
          type: string
          description: By default it's empty so the email_username is picked.
        email_username:
          type: string
          description: The username for authenticate against SMTP server.
        email_ssl:
          type: boolean
          description: When it's set to true the system will access Email server via
            TLS by default.  If it's set to false, it still will handle "STARTTLS"
            from server side.
        email_insecure:
          type: boolean
          description: Whether or not the certificate will be verified when Harbor
            tries to access the email server.
        ldap_url:
          type: string
          description: The URL of LDAP server.
        ldap_base_dn:
          type: string
          description: The Base DN for LDAP binding.
        ldap_filter:
          type: string
          description: The filter for LDAP binding.
        ldap_scope:
          type: integer
          description: 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE
        ldap_uid:
          type: string
          description: The attribute which is used as identity for the LDAP binding,
            such as "CN" or "SAMAccountname"
        ldap_search_dn:
          type: string
          description: The DN of the user to do the search.
        ldap_timeout:
          type: integer
          description: timeout in seconds for connection to LDAP server.
        ldap_group_attribute_name:
          type: string
          description: The attribute which is used as identity of the LDAP group,
            default is cn.
        ldap_group_base_dn:
          type: string
          description: The base DN to search LDAP group.
        ldap_group_search_filter:
          type: string
          description: The filter to search the ldap group.
        ldap_group_search_scope:
          type: integer
          description: The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,
            2-LDAP_SCOPE_SUBTREE'
        ldap_group_admin_dn:
          type: string
          description: Specify the ldap group which have the same privilege with Harbor
            admin.
        oidc_client_id:
          type: string
          description: The client id of the OIDC.
        oidc_client_secret:
          type: string
          description: The client secret of the OIDC.
        oidc_endpoint:
          type: string
          description: The URL of an OIDC-complaint server, must start with 'https://'.
        oidc_name:
          type: string
          description: The name of the OIDC provider.
        oidc_scope:
          type: string
          description: The scope sent to OIDC server during authentication, should
            be separated by comma. It has to contain “openid”, and “offline_access”.
            If you are using google, please remove “offline_access” from this field.
        oidc_verify_cert:
          type: boolean
          description: Whether verify your OIDC server certificate, disable it if
            your OIDC server is hosted via self-hosted certificate.
        project_creation_restriction:
          type: string
          description: This attribute restricts what users have the permission to
            create project.  It can be "everyone" or "adminonly".
        quota_per_project_enable:
          type: boolean
          description: This attribute indicates whether quota per project enabled
            in harbor
        read_only:
          type: boolean
          description: '''docker push'' is prohibited by Harbor if you set it to true.   '
        self_registration:
          type: boolean
          description: Whether the Harbor instance supports self-registration.  If
            it's set to false, admin need to add user to the instance.
        storage_per_project:
          type: string
          description: The default storage quota for the new created projects.
        token_expiration:
          type: integer
          description: The expiration time of the token for internal Registry, in
            minutes.
        verify_remote_cert:
          type: boolean
          description: Whether or not the certificate will be verified when Harbor
            tries to access a remote Harbor instance for replication.
        scan_all_policy:
          $ref: '#/components/schemas/Configurations_scan_all_policy'
    ConfigurationsResponse:
      type: object
      properties:
        auth_mode:
          $ref: '#/components/schemas/StringConfigItem'
        count_per_project:
          $ref: '#/components/schemas/IntegerConfigItem'
        email_from:
          $ref: '#/components/schemas/StringConfigItem'
        email_host:
          $ref: '#/components/schemas/StringConfigItem'
        email_port:
          $ref: '#/components/schemas/IntegerConfigItem'
        email_identity:
          $ref: '#/components/schemas/StringConfigItem'
        email_username:
          $ref: '#/components/schemas/StringConfigItem'
        email_ssl:
          $ref: '#/components/schemas/BoolConfigItem'
        email_insecure:
          $ref: '#/components/schemas/BoolConfigItem'
        ldap_url:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_base_dn:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_filter:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_scope:
          type: integer
          description: 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE
        ldap_uid:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_search_dn:
          type: string
          description: The DN of the user to do the search.
        ldap_timeout:
          $ref: '#/components/schemas/IntegerConfigItem'
        ldap_group_attribute_name:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_group_base_dn:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_group_search_filter:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_group_search_scope:
          $ref: '#/components/schemas/IntegerConfigItem'
        ldap_group_admin_dn:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_client_id:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_endpoint:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_name:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_scope:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_verify_cert:
          $ref: '#/components/schemas/BoolConfigItem'
        project_creation_restriction:
          $ref: '#/components/schemas/StringConfigItem'
        quota_per_project_enable:
          $ref: '#/components/schemas/BoolConfigItem'
        read_only:
          $ref: '#/components/schemas/BoolConfigItem'
        self_registration:
          $ref: '#/components/schemas/BoolConfigItem'
        storage_per_project:
          $ref: '#/components/schemas/IntegerConfigItem'
        token_expiration:
          $ref: '#/components/schemas/IntegerConfigItem'
        verify_remote_cert:
          $ref: '#/components/schemas/BoolConfigItem'
        scan_all_policy:
          $ref: '#/components/schemas/Configurations_scan_all_policy'
      example:
        email_ssl:
          editable: true
          value: true
        auth_mode:
          editable: true
          value: value
        ldap_scope: 6
        scan_all_policy:
          parameter:
            daily_time: 1
          type: type
        ldap_search_dn: ldap_search_dn
        count_per_project:
          editable: true
          value: 0
    RepositoryDescription:
      type: object
      properties:
        description:
          type: string
          description: The description of the repository.
    Label:
      type: object
      properties:
        id:
          type: integer
          description: The ID of label.
        name:
          type: string
          description: The name of label.
        description:
          type: string
          description: The description of label.
        color:
          type: string
          description: The color of label.
        scope:
          type: string
          description: The scope of label, g for global labels and p for project labels.
        project_id:
          type: integer
          description: The project ID if the label is a project label.
        creation_time:
          type: string
          description: The creation time of label.
        update_time:
          type: string
          description: The update time of label.
        deleted:
          type: boolean
          description: The label is deleted or not.
      example:
        creation_time: creation_time
        update_time: update_time
        deleted: true
        color: color
        project_id: 1
        scope: scope
        name: name
        description: description
        id: 1
    ProjectMemberEntity:
      type: object
      properties:
        id:
          type: integer
          description: the project member id
        project_id:
          type: integer
          description: the project id
        entity_name:
          type: string
          description: the name of the group member.
        role_name:
          type: string
          description: the name of the role
        role_id:
          type: integer
          description: the role id
        entity_id:
          type: integer
          description: the id of entity, if the member is a user, it is user_id in
            user table. if the member is a user group, it is the user group's ID in
            user_group table.
        entity_type:
          type: string
          description: the entity's type, u for user entity, g for group entity.
      example:
        role_name: role_name
        entity_type: entity_type
        project_id: 6
        entity_name: entity_name
        role_id: 1
        id: 0
        entity_id: 5
    ProjectMember:
      type: object
      properties:
        role_id:
          type: integer
          description: The role id 1 for projectAdmin, 2 for developer, 3 for guest,
            4 for master
        member_user:
          $ref: '#/components/schemas/UserEntity'
        member_group:
          $ref: '#/components/schemas/UserGroup'
    RoleRequest:
      type: object
      properties:
        role_id:
          type: integer
          description: The role id 1 for projectAdmin, 2 for developer, 3 for guest,
            4 for master
    UserEntity:
      type: object
      properties:
        user_id:
          type: integer
          description: The ID of the user.
        username:
          type: string
          description: The name of the user.
    UserGroup:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the user group
        group_name:
          type: string
          description: The name of the user group
        group_type:
          type: integer
          description: The group type, 1 for LDAP group, 2 for HTTP group.
        ldap_group_dn:
          type: string
          description: The DN of the LDAP group if group type is 1 (LDAP group).
      example:
        group_name: group_name
        ldap_group_dn: ldap_group_dn
        id: 0
        group_type: 6
    Resource:
      type: object
      properties:
        replication_policies:
          type: array
          description: The replication policy list.
          items:
            $ref: '#/components/schemas/ReplicationPolicy'
      example:
        replication_policies:
        - creation_time: creation_time
          description: description
          trigger:
            trigger_settings:
              cron: cron
            type: type
          filters:
          - type: type
            value: value
          - type: type
            value: value
          enabled: true
          update_time: update_time
          src_registry:
            creation_time: creation_time
            update_time: update_time
            credential:
              access_key: access_key
              access_secret: access_secret
              type: type
            name: name
            insecure: true
            description: description
            id: 6
            type: type
            url: url
            status: status
          deletion: true
          name: name
          dest_namespace: dest_namespace
          id: 0
          override: true
        - creation_time: creation_time
          description: description
          trigger:
            trigger_settings:
              cron: cron
            type: type
          filters:
          - type: type
            value: value
          - type: type
            value: value
          enabled: true
          update_time: update_time
          src_registry:
            creation_time: creation_time
            update_time: update_time
            credential:
              access_key: access_key
              access_secret: access_secret
              type: type
            name: name
            insecure: true
            description: description
            id: 6
            type: type
            url: url
            status: status
          deletion: true
          name: name
          dest_namespace: dest_namespace
          id: 0
          override: true
    StringConfigItem:
      type: object
      properties:
        value:
          type: string
          description: The string value of current config item
        editable:
          type: boolean
          description: The configure item can be updated or not
      example:
        editable: true
        value: value
    BoolConfigItem:
      type: object
      properties:
        value:
          type: boolean
          description: The boolean value of current config item
        editable:
          type: boolean
          description: The configure item can be updated or not
      example:
        editable: true
        value: true
    IntegerConfigItem:
      type: object
      properties:
        value:
          type: integer
          description: The integer value of current config item
        editable:
          type: boolean
          description: The configure item can be updated or not
      example:
        editable: true
        value: 0
    ChartAPIError:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          description: The error message returned by the chart API
      description: The error object returned by chart repository API
    UnauthorizedChartAPIError:
      description: Unauthorized
      allOf:
      - $ref: '#/components/schemas/ChartAPIError'
    ForbiddenChartAPIError:
      description: Operation is forbidden or quota exceeded
      allOf:
      - $ref: '#/components/schemas/ChartAPIError'
    InternalChartAPIError:
      description: Internal server error occurred
      allOf:
      - $ref: '#/components/schemas/ChartAPIError'
    NotFoundChartAPIError:
      description: Not found
      allOf:
      - $ref: '#/components/schemas/ChartAPIError'
    InsufficientStorageChartAPIError:
      description: Insufficient storage
      allOf:
      - $ref: '#/components/schemas/ChartAPIError'
    BadRequestFormatedError:
      description: Bad request
      allOf:
      - $ref: '#/components/schemas/ChartAPIError'
    ConflictFormatedError:
      description: Conflicts
      allOf:
      - $ref: '#/components/schemas/ChartAPIError'
    ChartInfoEntry:
      required:
      - created
      - name
      - total_versions
      type: object
      properties:
        name:
          type: string
          description: Name of chart
        total_versions:
          type: integer
          description: Total count of chart versions
        latest_version:
          type: string
          description: latest version of chart
        created:
          type: string
          description: The created time of chart
        updated:
          type: string
          description: The created time of chart
        icon:
          type: string
          description: The icon path of chart
        home:
          type: string
          description: The home website of chart
        deprecated:
          type: boolean
          description: Flag to indicate if the chart is deprecated
      description: The object contains basic chart information
      example:
        total_versions: 0
        latest_version: latest_version
        created: created
        deprecated: true
        name: name
        icon: icon
        updated: updated
        home: home
    ChartInfoList:
      type: array
      description: The chart list under the project
      items:
        $ref: '#/components/schemas/ChartInfoEntry'
    ChartMetadata:
      required:
      - apiVersion
      - appVersion
      - engine
      - icon
      - name
      - version
      type: object
      properties:
        name:
          type: string
          description: The name of the chart
        home:
          type: string
          description: The URL to the relevant project page
        sources:
          type: array
          description: The URL to the source code of chart
          items:
            type: string
        version:
          type: string
          description: A SemVer 2 version of chart
        description:
          type: string
          description: A one-sentence description of chart
        keywords:
          type: array
          description: A list of string keywords
          items:
            type: string
        engine:
          type: string
          description: The name of template engine
        icon:
          type: string
          description: The URL to an icon file
        apiVersion:
          type: string
          description: The API version of this chart
        appVersion:
          type: string
          description: The version of the application enclosed in the chart
        deprecated:
          type: boolean
          description: Whether or not this chart is deprecated
      description: The metadata of chart version
    ChartVersion:
      properties:
        labels:
          $ref: '#/components/schemas/Labels'
      description: A specified chart entry
      example:
        labels:
        - creation_time: creation_time
          update_time: update_time
          deleted: true
          color: color
          project_id: 1
          scope: scope
          name: name
          description: description
          id: 1
        - creation_time: creation_time
          update_time: update_time
          deleted: true
          color: color
          project_id: 1
          scope: scope
          name: name
          description: description
          id: 1
      allOf:
      - $ref: '#/components/schemas/ChartMetadata'
      - type: object
        properties:
          created:
            type: string
            description: The created time of the chart entry
          removed:
            type: boolean
            description: A flag to indicate if the chart entry is removed
          digest:
            type: string
            description: The digest value of the chart entry
          urls:
            type: array
            description: The urls of the chart entry
            items:
              type: string
    ChartVersions:
      type: array
      description: A list of chart entry
      items:
        $ref: '#/components/schemas/ChartVersion'
    DigitalSignature:
      type: object
      properties:
        signed:
          type: boolean
          description: A flag to indicate if the chart is signed
        prov_file:
          type: string
          description: The URL of the provance file
      description: The signature of the chart
      example:
        prov_file: prov_file
        signed: true
    SecurityReport:
      type: object
      properties:
        signature:
          $ref: '#/components/schemas/DigitalSignature'
      description: The security information of the chart
      example:
        signature:
          prov_file: prov_file
          signed: true
    Dependency:
      required:
      - name
      - version
      type: object
      properties:
        name:
          type: string
          description: The name of the chart denpendency
        version:
          type: string
          description: The version of the chart dependency
        repository:
          type: string
          description: The URL to the repository
      description: Another chart the chart depends on
      example:
        name: name
        repository: repository
        version: version
    ChartVersionDetails:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ChartVersion'
        security:
          $ref: '#/components/schemas/SecurityReport'
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/Dependency'
        values:
          type: object
          additionalProperties:
            type: object
            properties: {}
            example: {}
        files:
          type: object
          additionalProperties:
            type: string
        labels:
          $ref: '#/components/schemas/Labels'
      description: The detailed information of the chart entry
      example:
        metadata:
          labels:
          - creation_time: creation_time
            update_time: update_time
            deleted: true
            color: color
            project_id: 1
            scope: scope
            name: name
            description: description
            id: 1
          - creation_time: creation_time
            update_time: update_time
            deleted: true
            color: color
            project_id: 1
            scope: scope
            name: name
            description: description
            id: 1
        security:
          signature:
            prov_file: prov_file
            signed: true
        values:
          key: {}
        files:
          key: files
        dependencies:
        - name: name
          repository: repository
          version: version
        - name: name
          repository: repository
          version: version
        labels:
        - creation_time: creation_time
          update_time: update_time
          deleted: true
          color: color
          project_id: 1
          scope: scope
          name: name
          description: description
          id: 1
        - creation_time: creation_time
          update_time: update_time
          deleted: true
          color: color
          project_id: 1
          scope: scope
          name: name
          description: description
          id: 1
    GCResult:
      type: object
      properties:
        id:
          type: integer
          description: the id of gc job.
        job_name:
          type: string
          description: the job name of gc job.
        job_kind:
          type: string
          description: the job kind of gc job.
        schedule:
          $ref: '#/components/schemas/AdminJobScheduleObj'
        job_status:
          type: string
          description: the status of gc job.
        deleted:
          type: boolean
          description: if gc job was deleted.
        creation_time:
          type: string
          description: the creation time of gc job.
        update_time:
          type: string
          description: the update time of gc job.
      example:
        creation_time: creation_time
        schedule:
          cron: cron
          type: type
        job_status: job_status
        update_time: update_time
        deleted: true
        job_name: job_name
        id: 0
        job_kind: job_kind
    AdminJobSchedule:
      type: object
      properties:
        schedule:
          $ref: '#/components/schemas/AdminJobScheduleObj'
      example:
        schedule:
          cron: cron
          type: type
    AdminJobScheduleObj:
      type: object
      properties:
        type:
          type: string
          description: |
            The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manually' and 'None'.
            'Manually' means to trigger it right away and 'None' means to cancel the schedule.
        cron:
          type: string
          description: A cron expression, a time-based job scheduler.
      example:
        cron: cron
        type: type
    SearchResult:
      type: object
      properties:
        name:
          type: string
          description: The chart name with repo name
        score:
          type: integer
          description: The matched level
        chart:
          $ref: '#/components/schemas/ChartVersion'
      description: The chart search result item
      example:
        score: 1
        name: name
        chart:
          labels:
          - creation_time: creation_time
            update_time: update_time
            deleted: true
            color: color
            project_id: 1
            scope: scope
            name: name
            description: description
            id: 1
          - creation_time: creation_time
            update_time: update_time
            deleted: true
            color: color
            project_id: 1
            scope: scope
            name: name
            description: description
            id: 1
    Labels:
      type: array
      description: A list of label
      items:
        $ref: '#/components/schemas/Label'
    OverallHealthStatus:
      type: object
      properties:
        status:
          type: string
          description: The overall health status. It is "healthy" only when all the
            components' status are "healthy"
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentHealthStatus'
      description: The system health status
      example:
        components:
        - name: name
          error: error
          status: status
        - name: name
          error: error
          status: status
        status: status
    ComponentHealthStatus:
      type: object
      properties:
        name:
          type: string
          description: The component name
        status:
          type: string
          description: The health status of component
        error:
          type: string
          description: (optional) The error message when the status is "unhealthy"
      description: The health status of component
      example:
        name: name
        error: error
        status: status
    RobotAccount:
      type: object
      properties:
        id:
          type: integer
          description: The id of robot account
        name:
          type: string
          description: The name of robot account
        description:
          type: string
          description: The description of robot account
        expires_at:
          type: integer
          description: The expiration of robot account (in seconds)
        project_id:
          type: integer
          description: The project id of robot account
        disabled:
          type: boolean
          description: The robot account is disable or enable
        creation_time:
          type: string
          description: The creation time of the robot account
        update_time:
          type: string
          description: The update time of the robot account
      description: The object of robot account
      example:
        creation_time: creation_time
        update_time: update_time
        expires_at: 6
        project_id: 1
        name: name
        description: description
        disabled: true
        id: 0
    RobotAccountCreate:
      type: object
      properties:
        name:
          type: string
          description: The name of robot account
        description:
          type: string
          description: The description of robot account
        access:
          type: array
          description: The permission of robot account
          items:
            $ref: '#/components/schemas/RobotAccountAccess'
    RobotAccountPostRep:
      type: object
      properties:
        name:
          type: string
          description: the name of robot account
        token:
          type: string
          description: the token of robot account
      example:
        name: name
        token: token
    RobotAccountAccess:
      type: object
      properties:
        resource:
          type: string
          description: the resource of harbor
        action:
          type: string
          description: the action to resource that perdefined in harbor rbac
    RobotAccountUpdate:
      type: object
      properties:
        disabled:
          type: boolean
          description: The robot account is disable or enable
    Permission:
      type: object
      properties:
        resource:
          type: string
          description: The permission resoruce
        action:
          type: string
          description: The permission action
      description: The permission
      example:
        resource: resource
        action: action
    RegistryInfo:
      type: object
      properties:
        type:
          type: string
          description: The registry type
        description:
          type: string
          description: The description
        supported_resource_filters:
          type: array
          description: The filters that the registry supports
          items:
            $ref: '#/components/schemas/FilterStyle'
        supported_triggers:
          type: array
          description: The triggers that the registry supports
          items:
            type: string
      description: The registry info contains the base info and capability declarations
        of the registry
      example:
        supported_triggers:
        - supported_triggers
        - supported_triggers
        description: description
        type: type
        supported_resource_filters:
        - values:
          - values
          - values
          style: style
          type: type
        - values:
          - values
          - values
          style: style
          type: type
    FilterStyle:
      type: object
      properties:
        type:
          type: string
          description: The filter type
        style:
          type: string
          description: The filter style
        values:
          type: array
          description: The filter values
          items:
            type: string
      description: The style of the resource filter
      example:
        values:
        - values
        - values
        style: style
        type: type
    ReplicationExecution:
      type: object
      properties:
        id:
          type: integer
          description: The ID
        policy_id:
          type: integer
          description: The policy ID
        status:
          type: string
          description: The status
        status_text:
          type: string
          description: The status text
        trigger:
          type: string
          description: The trigger mode
        total:
          type: integer
          description: The total count of all tasks
        failed:
          type: integer
          description: The count of failed tasks
        succeed:
          type: integer
          description: The count of succeed tasks
        in_progress:
          type: integer
          description: The count of in_progress tasks
        stopped:
          type: integer
          description: The count of stopped tasks
        start_time:
          type: string
          description: The start time
        end_time:
          type: string
          description: The end time
      description: The replication execution
      example:
        start_time: start_time
        total: 1
        in_progress: 2
        stopped: 7
        policy_id: 6
        succeed: 5
        end_time: end_time
        id: 0
        status_text: status_text
        trigger: trigger
        failed: 5
        status: status
    ReplicationTask:
      type: object
      properties:
        id:
          type: integer
          description: The ID
        execution_id:
          type: integer
          description: The execution ID
        resource_type:
          type: string
          description: The resource type
        src_resource:
          type: string
          description: The source resource
        dst_resource:
          type: string
          description: The destination resource
        job_id:
          type: string
          description: The job ID
        status:
          type: string
          description: The status
        start_time:
          type: string
          description: The start time
        end_time:
          type: string
          description: The end time
      description: The replication task
      example:
        execution_id: 6
        dst_resource: dst_resource
        start_time: start_time
        src_resource: src_resource
        job_id: job_id
        resource_type: resource_type
        end_time: end_time
        id: 0
        status: status
    Namespace:
      type: object
      properties:
        name:
          type: string
          description: The name of namespace
        metadata:
          type: object
          properties: {}
          description: The metadata of namespace
          example: {}
      description: The namespace of registry
      example:
        metadata: {}
        name: name
    CVEWhitelist:
      type: object
      properties:
        id:
          type: integer
          description: ID of the whitelist
        project_id:
          type: integer
          description: ID of the project which the whitelist belongs to.  For system
            level whitelist this attribute is zero.
        expires_at:
          type: integer
          description: the time for expiration of the whitelist, in the form of seconds
            since epoch.  This is an optional attribute, if it's not set the CVE whitelist
            does not expire.
        items:
          type: array
          items:
            $ref: '#/components/schemas/CVEWhitelistItem'
      description: The CVE Whitelist for system or project
      example:
        expires_at: 3
        project_id: 9
        id: 7
        items:
        - cve_id: cve_id
        - cve_id: cve_id
    CVEWhitelistItem:
      type: object
      properties:
        cve_id:
          type: string
          description: The ID of the CVE, such as "CVE-2019-10164"
      description: The item in CVE whitelist
      example:
        cve_id: cve_id
    ResourceList:
      type: object
      additionalProperties:
        type: integer
    QuotaUpdateReq:
      type: object
      properties:
        hard:
          $ref: '#/components/schemas/ResourceList'
    QuotaRefObject:
      type: object
      additionalProperties:
        type: object
    Quota:
      type: object
      properties:
        id:
          type: integer
          description: ID of the quota
        ref:
          $ref: '#/components/schemas/QuotaRefObject'
        hard:
          $ref: '#/components/schemas/ResourceList'
        used:
          $ref: '#/components/schemas/ResourceList'
        creation_time:
          type: string
          description: the creation time of the quota
        update_time:
          type: string
          description: the update time of the quota
      description: The quota object
      example:
        creation_time: creation_time
        ref:
          key: {}
        update_time: update_time
        id: 0
        hard:
          key: 6
    WebhookTargetObject:
      type: object
      properties:
        type:
          type: string
          description: The webhook target notify type.
        address:
          type: string
          description: The webhook target address.
        auth_header:
          type: string
          description: The webhook auth header.
        skip_cert_verify:
          type: boolean
          description: Whether or not to skip cert verify.
      description: The webhook policy target object.
      example:
        address: address
        skip_cert_verify: true
        type: type
        auth_header: auth_header
    WebhookPolicy:
      type: object
      properties:
        id:
          type: integer
          description: The webhook policy ID.
          format: int64
        name:
          type: string
          description: The name of webhook policy.
        description:
          type: string
          description: The description of webhook policy.
        project_id:
          type: integer
          description: The project ID of webhook policy.
        targets:
          type: array
          items:
            $ref: '#/components/schemas/WebhookTargetObject'
        event_types:
          type: array
          items:
            type: string
        creator:
          type: string
          description: The creator of the webhook policy.
        creation_time:
          type: string
          description: The create time of the webhook policy.
        update_time:
          type: string
          description: The update time of the webhook policy.
        enabled:
          type: boolean
          description: Whether the webhook policy is enabled or not.
      description: The webhook policy object
      example:
        creation_time: creation_time
        creator: creator
        update_time: update_time
        event_types:
        - event_types
        - event_types
        project_id: 6
        name: name
        description: description
        id: 0
        targets:
        - address: address
          skip_cert_verify: true
          type: type
          auth_header: auth_header
        - address: address
          skip_cert_verify: true
          type: type
          auth_header: auth_header
        enabled: true
    WebhookLastTrigger:
      type: object
      properties:
        event_type:
          type: string
          description: The webhook event type.
        enabled:
          type: boolean
          description: Whether or not the webhook policy enabled.
        creation_time:
          type: string
          description: The creation time of webhook policy.
        last_trigger_time:
          type: string
          description: The last trigger time of webhook policy.
      description: The webhook policy and last trigger time group by event type.
      example:
        creation_time: creation_time
        event_type: event_type
        last_trigger_time: last_trigger_time
        enabled: true
    WebhookJob:
      type: object
      properties:
        id:
          type: integer
          description: The webhook job ID.
          format: int64
        policy_id:
          type: integer
          description: The webhook policy ID.
          format: int64
        event_type:
          type: string
          description: The webhook job event type.
        notify_type:
          type: string
          description: The webhook job notify type.
        status:
          type: string
          description: The webhook job status.
        job_detail:
          type: string
          description: The webhook job notify detailed data.
        creation_time:
          type: string
          description: The webhook job creation time.
        update_time:
          type: string
          description: The webhook job update time.
      description: The webhook job.
      example:
        creation_time: creation_time
        notify_type: notify_type
        job_detail: job_detail
        update_time: update_time
        event_type: event_type
        policy_id: 6
        id: 0
        status: status
    RetentionMetadata:
      type: object
      properties:
        templates:
          type: array
          description: templates
          items:
            $ref: '#/components/schemas/RetentionRuleMetadata'
        scope_selectors:
          type: array
          description: supported scope selectors
          items:
            $ref: '#/components/schemas/RetentionSelectorMetadata'
        tag_selectors:
          type: array
          description: supported tag selectors
          items:
            $ref: '#/components/schemas/RetentionSelectorMetadata'
      description: the tag retention metadata
      example:
        tag_selectors:
        - null
        - null
        templates:
        - rule_template: rule_template
          action: action
          params:
          - unit: unit
            type: type
            required: true
          - unit: unit
            type: type
            required: true
          display_text: display_text
        - rule_template: rule_template
          action: action
          params:
          - unit: unit
            type: type
            required: true
          - unit: unit
            type: type
            required: true
          display_text: display_text
        scope_selectors:
        - kind: kind
          decorations:
          - decorations
          - decorations
          display_text: display_text
        - kind: kind
          decorations:
          - decorations
          - decorations
          display_text: display_text
    RetentionRuleMetadata:
      type: object
      properties:
        rule_template:
          type: string
          description: rule id
        display_text:
          type: string
          description: rule display text
        action:
          type: string
          description: rule action
        params:
          type: array
          description: rule params
          items:
            $ref: '#/components/schemas/RetentionRuleParamMetadata'
      description: the tag retention rule metadata
      example:
        rule_template: rule_template
        action: action
        params:
        - unit: unit
          type: type
          required: true
        - unit: unit
          type: type
          required: true
        display_text: display_text
    RetentionRuleParamMetadata:
      type: object
      properties:
        type:
          type: string
        unit:
          type: string
        required:
          type: boolean
      description: rule param
      example:
        unit: unit
        type: type
        required: true
    RetentionSelectorMetadata:
      type: object
      properties:
        display_text:
          type: string
        kind:
          type: string
        decorations:
          type: array
          items:
            type: string
      description: retention selector
      example:
        kind: kind
        decorations:
        - decorations
        - decorations
        display_text: display_text
    RetentionPolicy:
      type: object
      properties:
        id:
          type: integer
          format: int64
        algorithm:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/RetentionRule'
        trigger:
          $ref: '#/components/schemas/RetentionRuleTrigger'
        scope:
          $ref: '#/components/schemas/RetentionPolicyScope'
      description: retention policy
      example:
        scope:
          ref: 5
          level: level
        rules:
        - template: template
          tag_selectors:
          - kind: kind
            pattern: pattern
            decoration: decoration
          - kind: kind
            pattern: pattern
            decoration: decoration
          scope_selectors:
            key:
            - null
            - null
          action: action
          disabled: true
          id: 6
          priority: 1
          params:
            key: {}
        - template: template
          tag_selectors:
          - kind: kind
            pattern: pattern
            decoration: decoration
          - kind: kind
            pattern: pattern
            decoration: decoration
          scope_selectors:
            key:
            - null
            - null
          action: action
          disabled: true
          id: 6
          priority: 1
          params:
            key: {}
        id: 0
        trigger:
          settings: {}
          references: {}
          kind: kind
        algorithm: algorithm
    RetentionRuleTrigger:
      type: object
      properties:
        kind:
          type: string
        settings:
          type: object
          properties: {}
          example: {}
        references:
          type: object
          properties: {}
          example: {}
      example:
        settings: {}
        references: {}
        kind: kind
    RetentionPolicyScope:
      type: object
      properties:
        level:
          type: string
        ref:
          type: integer
      example:
        ref: 5
        level: level
    RetentionRule:
      type: object
      properties:
        id:
          type: integer
        priority:
          type: integer
        disabled:
          type: boolean
        action:
          type: string
        template:
          type: string
        params:
          type: object
          additionalProperties:
            type: object
            properties: {}
            example: {}
        tag_selectors:
          type: array
          items:
            $ref: '#/components/schemas/RetentionSelector'
        scope_selectors:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/RetentionSelector'
      example:
        template: template
        tag_selectors:
        - kind: kind
          pattern: pattern
          decoration: decoration
        - kind: kind
          pattern: pattern
          decoration: decoration
        scope_selectors:
          key:
          - null
          - null
        action: action
        disabled: true
        id: 6
        priority: 1
        params:
          key: {}
    RetentionSelector:
      type: object
      properties:
        kind:
          type: string
        decoration:
          type: string
        pattern:
          type: string
      example:
        kind: kind
        pattern: pattern
        decoration: decoration
    RetentionExecution:
      type: object
      properties:
        id:
          type: integer
          format: int64
        policy_id:
          type: integer
          format: int64
        start_time:
          type: string
        end_time:
          type: string
        status:
          type: string
        trigger:
          type: string
        dry_run:
          type: boolean
      example:
        start_time: start_time
        policy_id: 6
        end_time: end_time
        dry_run: true
        id: 0
        trigger: trigger
        status: status
    RetentionExecutionTask:
      type: object
      properties:
        id:
          type: integer
          format: int64
        execution_id:
          type: integer
          format: int64
        repository:
          type: string
        job_id:
          type: string
        status:
          type: string
        status_code:
          type: integer
        status_revision:
          type: integer
          format: int64
        start_time:
          type: string
        end_time:
          type: string
        total:
          type: integer
        retained:
          type: integer
      example:
        execution_id: 6
        start_time: start_time
        retained: 2
        total: 5
        status_code: 1
        job_id: job_id
        end_time: end_time
        status_revision: 5
        id: 0
        repository: repository
        status: status
    QuotaSwitcher:
      type: object
      properties:
        enabled:
          type: boolean
          description: The quota is enable or disable
    ImmutableTagRule:
      type: object
      properties:
        id:
          type: integer
          format: int64
        project_id:
          type: integer
          format: int64
        tag_filter:
          type: string
        enabled:
          type: boolean
      example:
        project_id: 6
        tag_filter: tag_filter
        id: 0
        enabled: true
    ScannerRegistration:
      type: object
      properties:
        uuid:
          type: string
          description: The unique identifier of this registration.
        name:
          type: string
          description: The name of this registration.
          example: Clair
        description:
          type: string
          description: An optional description of this registration.
          example: |
            A free-to-use tool that scans container images for package vulnerabilities.
        url:
          type: string
          description: A base URL of the scanner adapter
          format: url
          example: http://harbor-scanner-clair:8080
        disabled:
          type: boolean
          description: Indicate whether the registration is enabled or not
          default: false
        is_default:
          type: boolean
          description: Indicate if the registration is set as the system default one
          default: false
        health:
          type: string
          description: Indicate the healthy of the registration
          example: healthy
          default: ""
        auth:
          type: string
          description: |
            Specify what authentication approach is adopted for the HTTP communications.
            Supported types Basic", "Bearer" and api key header "X-ScannerAdapter-API-Key"
          example: Bearer
          default: ""
        access_credential:
          type: string
          description: |
            An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
          example: 'Bearer: JWTTOKENGOESHERE'
        skip_certVerify:
          type: boolean
          description: Indicate if skip the certificate verification when sending
            HTTP requests
          default: false
        use_internal_addr:
          type: boolean
          description: Indicate whether use internal registry addr for the scanner
            to pull content or not
          default: false
        adapter:
          type: string
          description: Optional property to describe the name of the scanner registration
          example: Clair
        vendor:
          type: string
          description: Optional property to describe the vendor of the scanner registration
          example: CentOS
        version:
          type: string
          description: Optional property to describe the version of the scanner registration
          example: 1.0.1
      description: |
        Registration represents a named configuration for invoking a scanner via its adapter.
      example:
        skip_certVerify: false
        adapter: Clair
        auth: Bearer
        description: |
          A free-to-use tool that scans container images for package vulnerabilities.
        health: healthy
        is_default: false
        uuid: uuid
        version: 1.0.1
        url: http://harbor-scanner-clair:8080
        vendor: CentOS
        name: Clair
        disabled: false
        use_internal_addr: false
        access_credential: 'Bearer: JWTTOKENGOESHERE'
    ScannerRegistrationReq:
      type: object
      properties:
        name:
          type: string
          description: The name of this registration
          example: Clair
        description:
          type: string
          description: An optional description of this registration.
          example: |
            A free-to-use tool that scans container images for package vulnerabilities.
        url:
          type: string
          description: A base URL of the scanner adapter.
          format: url
          example: http://harbor-scanner-clair:8080
        auth:
          type: string
          description: |
            Specify what authentication approach is adopted for the HTTP communications.
            Supported types Basic", "Bearer" and api key header "X-ScannerAdapter-API-Key"
          example: Bearer
          default: ""
        access_credential:
          type: string
          description: |
            An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
          example: 'Bearer: JWTTOKENGOESHERE'
        skip_certVerify:
          type: boolean
          description: Indicate if skip the certificate verification when sending
            HTTP requests
          default: false
        use_internal_addr:
          type: boolean
          description: Indicate whether use internal registry addr for the scanner
            to pull content or not
          default: false
        disabled:
          type: boolean
          description: Indicate whether the registration is enabled or not
          default: false
    ScannerRegistrationSettings:
      type: object
      properties:
        name:
          type: string
          description: The name of this registration
          example: Clair
        url:
          type: string
          description: A base URL of the scanner adapter.
          format: url
          example: http://harbor-scanner-clair:8080
        auth:
          type: string
          description: |
            Specify what authentication approach is adopted for the HTTP communications.
            Supported types Basic", "Bearer" and api key header "X-ScannerAdapter-API-Key"
          default: ""
        access_credential:
          type: string
          description: |
            An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
          example: 'Bearer: JWTTOKENGOESHERE'
    IsDefault:
      type: object
      properties:
        is_default:
          type: boolean
          description: A flag indicating whether a scanner registration is default.
    Scanner:
      type: object
      properties:
        name:
          type: string
          description: Name of the scanner
          example: Clair
        vendor:
          type: string
          description: Name of the scanner provider
          example: CentOS
        version:
          type: string
          description: Version of the scanner adapter
          example: 1.0.1
      example:
        vendor: CentOS
        name: Clair
        version: 1.0.1
    ScannerCapability:
      type: object
      properties:
        consumes_mime_types:
          type: array
          items:
            type: string
            example: application/vnd.docker.distribution.manifest.v2+json
        produces_mime_types:
          type: array
          items:
            type: string
            example: application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0
      example:
        consumes_mime_types:
        - application/vnd.docker.distribution.manifest.v2+json
        - application/vnd.docker.distribution.manifest.v2+json
        produces_mime_types:
        - application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0
        - application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0
    ScannerAdapterMetadata:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Scanner'
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/ScannerCapability'
        properties:
          type: object
          additionalProperties:
            type: string
          example:
            harbor.scanner-adapter/registry-authorization-type: Bearer
      description: The metadata info of the scanner adapter
      example:
        capabilities:
        - consumes_mime_types:
          - application/vnd.docker.distribution.manifest.v2+json
          - application/vnd.docker.distribution.manifest.v2+json
          produces_mime_types:
          - application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0
          - application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0
        - consumes_mime_types:
          - application/vnd.docker.distribution.manifest.v2+json
          - application/vnd.docker.distribution.manifest.v2+json
          produces_mime_types:
          - application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0
          - application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0
        name:
          vendor: CentOS
          name: Clair
          version: 1.0.1
        properties:
          harbor.scanner-adapter/registry-authorization-type: Bearer
    ProjectScanner:
      type: object
      properties:
        uuid:
          type: string
          description: The identifier of the scanner registration
    VulnerabilityItem:
      type: object
      properties:
        id:
          type: string
          description: ID of the CVE.
          example: CVE-2017-8283
        package:
          type: string
          description: An operating system or software dependency package containing
            the vulnerability.
          example: dpkg
        version:
          type: string
          description: The version of the package containing the vulnerability.
          example: 1.17.27
        fix_version:
          type: string
          description: The version of the package containing the fix if available.
          example: 1.18.0
        severity:
          type: string
          description: A standard scale for measuring the severity of a vulnerability.
          example: high
        description:
          type: string
          description: Description of the CVE
          example: dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU
            patch program
        links:
          type: array
          description: The list of link to the upstream database with the full description
            of the vulnerability.
          items:
            type: string
            example: https://security-tracker.debian.org/tracker/CVE-2017-8283
      example:
        severity: high
        package: dpkg
        fix_version: 1.18.0
        description: dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU
          patch program
        links:
        - https://security-tracker.debian.org/tracker/CVE-2017-8283
        - https://security-tracker.debian.org/tracker/CVE-2017-8283
        id: CVE-2017-8283
        version: 1.17.27
    Report:
      type: object
      properties:
        generated_at:
          type: string
          description: Time of generating this report
          example: 2006-01-02T15:04:05
        severity:
          type: string
          description: A standard scale for measuring the severity of a vulnerability.
          example: high
        vulnerabilities:
          type: array
          items:
            $ref: '#/components/schemas/VulnerabilityItem'
        scanner:
          $ref: '#/components/schemas/Scanner'
      description: The harbor native report format
      example:
        severity: high
        generated_at: 2006-01-02T15:04:05
        scanner:
          vendor: CentOS
          name: Clair
          version: 1.0.1
        vulnerabilities:
        - severity: high
          package: dpkg
          fix_version: 1.18.0
          description: dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a
            non-GNU patch program
          links:
          - https://security-tracker.debian.org/tracker/CVE-2017-8283
          - https://security-tracker.debian.org/tracker/CVE-2017-8283
          id: CVE-2017-8283
          version: 1.17.27
        - severity: high
          package: dpkg
          fix_version: 1.18.0
          description: dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a
            non-GNU patch program
          links:
          - https://security-tracker.debian.org/tracker/CVE-2017-8283
          - https://security-tracker.debian.org/tracker/CVE-2017-8283
          id: CVE-2017-8283
          version: 1.17.27
    ScanOverview:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NativeReportSummary'
      description: The scan overview attached in the metadata of tag
    NativeReportSummary:
      type: object
      properties:
        report_id:
          type: string
          description: id of the native scan report
          example: 5f62c830-f996-11e9-957f-0242c0a89008
        scan_status:
          type: string
          description: The status of the report generating process
          example: Success
        severity:
          type: string
          description: The overall severity
          example: High
        duration:
          type: integer
          description: The seconds spent for generating the report
          format: int64
          example: 300
        summary:
          $ref: '#/components/schemas/VulnerabilitySummary'
        start_time:
          type: string
          description: The start time of the scan process that generating report
          format: date-time
        end_time:
          type: string
          description: The end time of the scan process that generating report
          format: date-time
      description: The summary for the native report
      example:
        severity: High
        duration: 300
        summary:
          summary:
            Critical: 5
            High: 5
          total: 500
          fixable: 100
        start_time: 2000-01-23T04:56:07.000+00:00
        scan_status: Success
        report_id: 5f62c830-f996-11e9-957f-0242c0a89008
        end_time: 2000-01-23T04:56:07.000+00:00
    VulnerabilitySummary:
      type: object
      properties:
        total:
          type: integer
          description: The total number of the found vulnerabilities
          format: int
          example: 500
        fixable:
          type: integer
          description: The number of the fixable vulnerabilities
          format: int
          example: 100
        summary:
          type: object
          additionalProperties:
            type: integer
            format: int
            example: 10
          description: Numbers of the vulnerabilities with different severity
          example:
            Critical: 5
            High: 5
      description: |
        VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.
      example:
        summary:
          Critical: 5
          High: 5
        total: 500
        fixable: 100
    Stats:
      type: object
      properties:
        total:
          type: integer
          description: The total number of scan processes triggered by the scan all
            action
          format: int
          example: 100
        completed:
          type: integer
          description: The number of the finished scan processes triggered by the
            scan all action
          format: int
          example: 90
        requester:
          type: string
          description: The requester identity which usually uses the ID of the scan
            all job
          example: "28"
        metrics:
          type: object
          additionalProperties:
            type: integer
            format: int
            example: 10
          description: The metrics data for the each status
          example:
            Success: 5
            Error: 2,
            Running: 3
      description: Stats provides the overall progress of the scan all process.
      example:
        requester: "28"
        total: 100
        completed: 90
        metrics:
          Success: 5
          Error: 2,
          Running: 3
    body:
      type: object
      properties:
        secret:
          type: string
          description: The new secret
    inline_response_200:
      type: object
      properties:
        healthy:
          type: boolean
      example:
        healthy: true
    body_1:
      required:
      - chart
      properties:
        chart:
          type: string
          description: The chart file
          format: binary
        prov:
          type: string
          description: The provance file
          format: binary
    body_2:
      required:
      - prov
      properties:
        prov:
          type: string
          description: The provance file
          format: binary
    body_3:
      required:
      - chart
      properties:
        chart:
          type: string
          description: The chart file
          format: binary
        prov:
          type: string
          description: The provance file
          format: binary
    body_4:
      type: object
      properties:
        url:
          type: string
          description: The URL of OIDC endpoint to be tested.
        verify_cert:
          type: boolean
          description: Whether the certificate should be verified
    body_5:
      type: object
      properties:
        dry_run:
          type: boolean
    body_6:
      type: object
      properties:
        action:
          type: string
    ProjectSummary_quota:
      type: object
      properties:
        hard:
          $ref: '#/components/schemas/ResourceList'
        used:
          $ref: '#/components/schemas/ResourceList'
      example:
        hard:
          key: 7
    GeneralInfo_clair_vulnerability_status:
      type: object
      properties:
        overall_last_update:
          type: integer
          description: The UTC timestamp in milliseconds of last successful update
            for Clair vulnerability data, when all the updaters are successfully executed.
        details:
          type: array
          description: Detail timestamp of different namespace.  This is introduced
            to handle the case when some updaters are executed successfully and some
            not.
          items:
            $ref: '#/components/schemas/VulnNamespaceTimestamp'
      description: The status of vulnerability data of Clair.
      example:
        overall_last_update: 6
        details:
        - last_update: 1
          namespace: namespace
        - last_update: 1
          namespace: namespace
    Configurations_scan_all_policy_parameter:
      type: object
      properties:
        daily_time:
          type: integer
          description: The offset in seconds of UTC 0 o'clock, only valid when the
            policy type is "daily"
      description: The parameters of the policy, the values are dependant on the type
        of the policy.
      example:
        daily_time: 1
    Configurations_scan_all_policy:
      type: object
      properties:
        type:
          type: string
          description: The type of scan all policy, currently the valid values are
            "none" and "daily"
        parameter:
          $ref: '#/components/schemas/Configurations_scan_all_policy_parameter'
      example:
        parameter:
          daily_time: 1
        type: type
  responses:
    BadRequest:
      description: Bad Request
      content: {}
    Conflict:
      description: Conflict
      content: {}
    Created:
      description: Created
      content: {}
    Forbidden:
      description: Forbidden
      content: {}
    InternalServerError:
      description: Internal Server Error
      content: {}
    NotFound:
      description: Not Found
      content: {}
    OK:
      description: Success
      content: {}
    PreconditionFailed:
      description: Precondition Failed
      content: {}
    Unauthorized:
      description: Unauthorized
      content: {}
    UnsupportedMediaType:
      description: The Media Type of the request is not supported, it has to be "application/json"
      content: {}
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
